<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo + github 搭建个人博客</title>
    <url>/2022/02/20/hello-world/</url>
    <content><![CDATA[<p>搭建博客最重要的就是<strong>耐心</strong>和<strong>坚持</strong>。搭建时候遇见许多问题(权限、版本等等)，经过耐心的搜索解决方案逐一解决还是非常开心的！<span id="more"></span></p>
<h2 id="利用-hexo-github-搭建个人博客"><a href="#利用-hexo-github-搭建个人博客" class="headerlink" title="利用 hexo + github 搭建个人博客"></a>利用 hexo + github 搭建个人博客</h2><h3 id="注册-Github-和安装-Git"><a href="#注册-Github-和安装-Git" class="headerlink" title="注册 Github 和安装 Git"></a>注册 Github 和安装 Git</h3><p>首先，我们需要注册一个<a href="https://github.com/">GitHub</a>账号，有时候会因为网络问题而刷新不出页面就需要多刷新几次。(也可以利用Gitee)。然后进入Git官方(<a href="https://git-scm.com/">Git (git-scm.com)</a>)，下载Git。</p>
<h3 id="绑定-Github"><a href="#绑定-Github" class="headerlink" title="绑定 Github"></a>绑定 Github</h3><p>绑定GitHub方便我们上传文件。虽然在GitHub上我们可以直接上传文件，但是由于网络的原因并不好用，所以我们利用SSH来完成GitHub的绑定并提交文件，这样很方便快捷。</p>
<p>检查是否安装SSH，我们在新建的文件夹中右键打开Git Bash:</p>
<p>输入 ssh 命令，查看本机是否安装ssh。</p>
<p><img src="/../resources/image-20220307100552958.png"></p>
<p>已安装 ssh 输入ssh-keygen -t rsa 命令，指定 RSA 算法生成密钥，然后敲四次回车键，之后会生成两个文件，分别为密钥 id_rsa 和公钥id_rsa.pub。接下来我们把公钥 id_rsa.pub 的内容添加到 Github。输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd ~/.ssh</span><br><span class="line">$ ls</span><br><span class="line">$ cat id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>然后我们进入 Github 主页，点击右上角，然后点击 settings。</p>
<p><img src="/../resources/image-20220227222617803.png" alt="image-20220227222617803-16466193186986"></p>
<p>点击 SSH and GPG keys，再点击 New SSH key</p>
<p><img src="/../resources/image-20220227222722625.png" alt="image-20220227222722625"></p>
<p>将复制的公钥 id_rsa.pub 的内容粘贴到 key 内，再点击  Add SSH key，如下图(Title可以为空)：</p>
<p><img src="/../resources/image-20220227222758260.png" alt="image-20220227222758260"></p>
<p>验证是否成功，我们可以通过在 Git Bash 中输入 ssh -T <a href="mailto:&#103;&#x69;&#x74;&#x40;&#x67;&#105;&#x74;&#104;&#x75;&#98;&#46;&#x63;&#x6f;&#109;">&#103;&#x69;&#x74;&#x40;&#x67;&#105;&#x74;&#104;&#x75;&#98;&#46;&#x63;&#x6f;&#109;</a> 进行检验。</p>
<h3 id="提交文件"><a href="#提交文件" class="headerlink" title="提交文件"></a>提交文件</h3><p><strong>本地没有 git 仓库</strong></p>
<ol>
<li>直接将远程仓库 clone 到本地；</li>
<li>将文件添加并 commit 到本地仓库；</li>
<li>将本地仓库的内容push到远程仓库。</li>
</ol>
<p>首先，进入 Github 个人主页。</p>
<p>点击进入我新建的 <strong>text</strong> 项目：</p>
<p><img src="/../resources/image-20220227224505608.png" alt="image-20220227224505608"></p>
<p>点击 <strong>Code</strong> ，再复制地址，然后进入我们准备存储 Git 仓库的目录，如下图：</p>
<p><img src="/../resources/image-20220227224802896.png" alt="image-20220227224802896"></p>
<p>点击 <strong>Clone or download</strong>，再复制地址，然后进入我们准备存储 Git 仓库的目录，如下图：</p>
<p><img src="/../resources/image-20220227224831420.png" alt="image-20220227224831420"></p>
<p>接下来，输入 git clone <a href="mailto:&#103;&#x69;&#116;&#x40;&#103;&#x69;&#x74;&#x68;&#117;&#98;&#x2e;&#x63;&#x6f;&#109;">&#103;&#x69;&#116;&#x40;&#103;&#x69;&#x74;&#x68;&#117;&#98;&#x2e;&#x63;&#x6f;&#109;</a>:ez-Cong&#x2F;text.git，将远程仓库 clone 到本地。然后检查 clone 到本地的仓库内容与远程仓库的内容是否完全一致。</p>
<p>然后创建一个 text.txt 测试文件，如下图。</p>
<p><img src="/../resources/image-20220227225419620.png" alt="image-20220227225419620"></p>
<p>从此目录进入 Git Bash， 输入 git status 查看仓库状态：</p>
<p><img src="/../resources/image-20220227225710786.png" alt="image-20220227225710786"></p>
<p>text 已经是一个 Git 仓库了，而我们刚刚创建的文件 text.txt 没有被追踪，也就是没有提交到本地仓库。现在我们使用 git add 命令将文件添加到了「临时缓冲区」，再用 git commit -m “提交信息” 将其提交到本地仓库。</p>
<p>如果你是第一次提交的话，就会出现下图的情况，会让你输入用户名和邮箱：</p>
<p><img src="/../resources/image-20220227225819195.png" alt="image-20220227225819195"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">#你只要再加两行代码就行：</span><br><span class="line">$ git config --global user.name<span class="string">&quot;xxxxx&quot;</span></span><br><span class="line">$ git config --global user.email<span class="string">&quot;xxxxxxx.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>完成后输入 git log 命令查看仓库提交日志：</p>
<p><img src="/../resources/image-20220227225915090.png" alt="image-20220227225915090"></p>
<p>再输入 git status 查看一下仓库状态：</p>
<p><img src="/../resources/image-20220227225955725.png" alt="image-20220227225955725"></p>
<p>现在输入 git push origin main 命令，将本地仓库提交到远程仓库，origin是远程主机的名字。</p>
<p>刷新 GitHub 中 text 仓库。我们会发现这时我们的测试文件已经上传到了 text 仓库中。</p>
<h3 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h3><p>我是在万网购买的域名。</p>
<p>登录万网：<a href="https://link.zhihu.com/?target=https://wanwang.aliyun.com/">万网-阿里云官网</a></p>
<p><img src="/../resources/image-20220227230302506.png" alt="image-20220227230302506"></p>
<p>如果没有注册要先注册一个账号，如果已经注册过直接登录就行。（这里网络上有很多教程，所以就 ……..）</p>
<h3 id="安装node-js和Hexo"><a href="#安装node-js和Hexo" class="headerlink" title="安装node.js和Hexo"></a>安装node.js和Hexo</h3><p><strong>1.安装Nodejs</strong></p>
<p>下载地址：<a href="https://link.zhihu.com/?target=https://nodejs.org/en/">node.js官网</a></p>
<p><img src="/../resources/image-20220227230526391.png" alt="image-20220227230526391"></p>
<p>如上图，直接点击下载，完成后双击安装，安装直接默认 <em><strong>next</strong></em> 就好，我是在E盘新建了一个文件夹 nodejs，安装在这个文件夹里。如果要看详细到每一步的话，可以看一下这个文章：<a href="https://link.zhihu.com/?target=https://blog.csdn.net/antma/article/details/86104068">node.js 安装详细步骤教程</a>。</p>
<p>安装完成可以用打开cmd检验一下是否安装成功，用 node -v 和 npm -v 命令检查版本，如下图：</p>
<p><img src="/../resources/image-20220227230619080.png" alt="image-20220227230619080"></p>
<p><strong>设置npm在安装全局模块时的路径和环境变量</strong></p>
<p>因为如果不设置的话，安装模块的时候就会把模块装到C盘，占用C盘的空间，并且有可能安装好hexo后却无法使用，所以我们需要设置一下：</p>
<p>在 nodejs 文件夹中新建两个空文件夹 node_cache、node_global，如下图：</p>
<p><img src="/../resources/image-20220227230720158.png" alt="image-20220227230720158"></p>
<p>打开cmd，输入如下两个命令：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm config set prefix &quot;D:\nodejs\node_global&quot;</span><br><span class="line">npm config set cache &quot;D:\nodejs\node_cache&quot;</span><br></pre></td></tr></table></figure>

<p>设置环境变量：<strong>win10系统 –&gt; 打开控制面板 –&gt; 系统 –&gt;高级系统设置 –&gt; 环境变量 ，</strong>然后在系统变量中新建一个变量名为“NODE_PATH”，值为“E:\nodejs\node_global\node_modules”，如下图：</p>
<p><img src="/../resources/image-20220227230852841.png" alt="image-20220227230852841"></p>
<p>然后编辑用户变量里的Path，将相应npm的路径改为：E:\nodejs\node_global，如下图：</p>
<p><img src="/../resources/image-20220227230932586.png" alt="image-20220227230932586"></p>
<p>然后编辑用户变量里的Path，将相应npm的路径改为：E:\nodejs\node_global，如下图：</p>
<p><img src="/../resources/image-20220227231020336.png" alt="image-20220227231020336"></p>
<p><strong>测试</strong></p>
<p>在 cmd 命令下执行 npm install webpack -g，然后会发现 webpack 这个模块已经在我们设置默认的文件夹中了。</p>
<p><img src="/../resources/image-20220227231158159.png" alt="image-20220227231158159"></p>
<p><strong>注意：</strong></p>
<p>这里有时候会显示安装失败，我们要以管理员启动 cmd 安装就可以解决这一问题。</p>
<p><strong>2.安装hexo</strong></p>
<p>Hexo是我们的个人博客网站的框架，安装之前，我们要先在GitHub上创立一个仓库，如下图：</p>
<p><img src="/../resources/image-20220227231519202.png" alt="image-20220227231519202"></p>
<p><img src="/../resources/image-20220227231638458.png" alt="image-20220227231638458"></p>
<p>接下来安装Hexo，首先在E盘建立一个文件夹 Blog，点开 Blog 文件夹，鼠标右键打开 Git Bush Here，输入npm命令安装Hexo：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>这里可能会出现安装失败，同样要使用管理员权限打开 git bash。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo init 初始化博客</span><br><span class="line">hexo g    静态部署</span><br><span class="line">hexo s	  网页部署完成，输入命令查看</span><br></pre></td></tr></table></figure>

<p><strong>将Hexo部署到GitHub</strong></p>
<p>找到我们的 Blog 文件夹，用记事本打开 _config.yml 文件，下滑到文件底部，补充如下内容：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:ez-Cong/ez-Cong.github.io.git  #你的仓库地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>_config.yml 文件格式要求很严格！！！一定要注意空格！！！！</p>
<p><img src="/../resources/image-20220227232242004.png" alt="image-20220227232242004"></p>
<p>仓库地址如下图：</p>
<p><img src="/../resources/image-20220227232323366.png" alt="image-20220227232323366"></p>
<p>回到 Blog 文件夹中，打开 Git Bash，安装Git部署插件，输入命令：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>然后分别输入以下三条命令：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo clean   #清除缓存文件 db.json 和已生成的静态文件 public</span><br><span class="line">hexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</span><br><span class="line">hexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span><br></pre></td></tr></table></figure>

<p>完成以后，打开浏览器，输入 <a href="https://link.zhihu.com/?target=https://fengye97.github.io/">https://xxx.github.io</a> 就可以打开你的网页了！</p>
<h3 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h3><ol>
<li>登录<a href="https://link.zhihu.com/?target=https://wanwang.aliyun.com/">万网</a>，点击控制台，在你已购买的域名后点击解析添加两条解析记录：</li>
</ol>
<p><img src="/../resources/image-20220227232754828.png" alt="image-20220227232754828"></p>
<p>IPV4地址可以通过ping得到，具体方法是：打开cmd输入下面命令：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">ping ez-Cong.github.io    #ping + 你的GitHub的网址</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>打开 Blog 文件夹里的 source 文件夹，添加CNAME文件，可以先创建一个CNAME.txt文件，打开后写上你的域名，不要加www否则每次访问都必须加www，但如果不带有www，以后访问的时候带不带www都可以访问，保存后记得要重命名，将.txt删除，如下图：</p>
<p><img src="/../resources/image-20220227232946124.png" alt="image-20220227232946124"></p>
<p><img src="/../resources/image-20220227233002760.png" alt="image-20220227233002760"></p>
<p>然后回到 Blog 文件夹，右键打开 Git Bash，依次输入下面三条命令：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>打开GitHub，点击 <strong>settings</strong> ，看看CNAME文件是否已经在你的项目中。</p>
<p>大功告成！这时候就可以浏览器直接输入你的域名就会进入自己搭建的网页啦！！！</p>
</li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo搭建博客</tag>
      </tags>
  </entry>
</search>
