<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>程序人生</title>
    <link>https://congyx.com/</link>
    
    <atom:link href="https://congyx.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>欲买桂花同载酒，终不似，少年游。</description>
    <pubDate>Thu, 11 Aug 2022 12:52:08 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>知识图谱实践(七)</title>
      <link>https://congyx.com/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E5%AE%9E%E8%B7%B5-%E4%B8%83/</link>
      <guid>https://congyx.com/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E5%AE%9E%E8%B7%B5-%E4%B8%83/</guid>
      <pubDate>Thu, 11 Aug 2022 12:26:03 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;网页数据抽取&quot;&gt;&lt;a href=&quot;#网页数据抽取&quot; class=&quot;headerlink&quot; title=&quot;网页数据抽取&quot;&gt;&lt;/a&gt;网页数据抽取&lt;/h1&gt;&lt;p&gt;互联网中蕴含着大量的数据资源，这些数据存在于html的代码之中，如何从浩瀚的代码中提取有效的数据，针对不同的情况，可以采用多种方法来实现网页数据的提取。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="网页数据抽取"><a href="#网页数据抽取" class="headerlink" title="网页数据抽取"></a>网页数据抽取</h1><p>互联网中蕴含着大量的数据资源，这些数据存在于html的代码之中，如何从浩瀚的代码中提取有效的数据，针对不同的情况，可以采用多种方法来实现网页数据的提取。<span id="more"></span></p><h2 id="手工方法"><a href="#手工方法" class="headerlink" title="手工方法"></a>手工方法</h2><p>网页呈现数据的方式，一般都是按照导航页、列表页、详情页进行设计，这就会使得数据展示存在一定的规律，我们找出这种规律，就可以制定相应的规则，来获取数据。比如。京东商城中笔记本的列表页面。</p><p><img src="/../resources%5C935893-20190923153137663-1112940991.png" alt="image-20220811203513854"></p><p> 我们想要在该页面提取笔记本的价格数据，则需要对页面的html代码进行分析，获取其html代码，如下所示：</p><p><img src="/../resources%5C935893-20190923153204804-1915389282.png" alt="image-20220811203513854"></p><h3 id="利用XPath语言"><a href="#利用XPath语言" class="headerlink" title="利用XPath语言"></a>利用XPath语言</h3><p>利用其html代码进行数据提取，可以采用XPath语言，XPath即为XML路径语言（XML Path Language），它是一种用来确定XML文档中某部分位置的语言。XPath基于XML的树状结构，提供在数据结构树中找寻节点的能力。XPath被开发者采用来当作小型查询语言。</p><p>​    价格信息的Xpath代码为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//*[@id=”plist”]/ul/li[5]/div/div[3]/strong</span><br></pre></td></tr></table></figure><h3 id="利用CSS选择器"><a href="#利用CSS选择器" class="headerlink" title="利用CSS选择器"></a>利用CSS选择器</h3><p>与之类似的，也可以采用CSS选择器来进行定位笔记本价格，把html代码看作是一个dom树，按照树的层次结构，利用CSS选择器来一层层的定位到价格。该笔记本价格信息的CSS选择器的表达式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\#plist&gt;ul&gt;li:nth-child(5)&gt;div&gt;div.p-price&gt;strong</span><br></pre></td></tr></table></figure><h2 id="包装器归纳"><a href="#包装器归纳" class="headerlink" title="包装器归纳"></a>包装器归纳</h2><p>包装器就是将数据从网页中抽取出来，并将数据还原为结构化数据。包装器归纳是基于有监督学习的，它从标注好的训练样例集合中学习数据抽取规则，用于从其它相同标记或相同网页模板中抽取目标数据。</p><p>包装器归纳主要包括网页清洗、网页标注、包装器空间生成、包装器评估、包装器归纳结果等步骤。</p><h3 id="网页清洗"><a href="#网页清洗" class="headerlink" title="网页清洗"></a>网页清洗</h3><p>网页清洗主要解决网页代码不规范的问题，比如网页中的标签没有闭合，个别标签使用不规范等，网页结构代码不严谨，就会导致在抽取过程中的噪声，使用一些工具比如Tidy，对网页进行规范化处理，可以在后期的抽取过程中减少噪声的影响。</p><h3 id="网页标注"><a href="#网页标注" class="headerlink" title="网页标注"></a>网页标注</h3><p>网页标注就是在网页上标注所需要抽取的数据，标注的过程可以是在需要抽取的数据位置上打上特殊的标签，表示这个数据是需要抽取的。比如，我们前面抽取的笔记本的价格数据，就可以在价格标签上打上特殊符号，将价格信息标记为抽取数据。</p><h3 id="包装器空间的生成"><a href="#包装器空间的生成" class="headerlink" title="包装器空间的生成"></a>包装器空间的生成</h3><p>对标注的数据生成XPath集合空间，对生成的集合进行归纳，形成若干个子集。归纳的规则是在子集中的XPath能够覆盖多个标注的数据项，具有一定的泛化能力。</p><h3 id="包装器评估"><a href="#包装器评估" class="headerlink" title="包装器评估"></a>包装器评估</h3><p> 对包装器进行评估，需要采用一定的标准，主要有两个标准，准确率和召回率。</p><p>​    准确率。将筛选出来的包装器对原先训练的网页进行标注，统计与人工标注的相同项的数量，除以当前标注的总数量。准确率越高评分越高。</p><p>​    召回率。将筛选出来的包装器对原先训练的网页进行标注，统计与人工标注的相同项的数量，除以人工标注的总数量。召回率越高评分越高。</p><p>​    经过前面一系列的步骤之后，得到包装器归纳结果，也就是笔记本最后搜索页面价格信息的XPath路径。</p><h2 id="包装器归纳的简单举例"><a href="#包装器归纳的简单举例" class="headerlink" title="包装器归纳的简单举例"></a>包装器归纳的简单举例</h2><p>假如我们的标注信息，同时标注了n1，n2。它们的XPath分别是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n1的XPath：/html[1]/body[1]/table[1]/tbody[1]/tr[2]/td[1]</span><br><span class="line"></span><br><span class="line">n2的XPath：/html[1]/body[1]/table[1]/tbody[1]/tr[3]/td[1]</span><br></pre></td></tr></table></figure><p>将其归纳到一个集合，然后泛化后得到的XPath可能有两个：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A: /html[1]/body[1]/table[1]/tbody[1]/tr[3]/td[1]；B: //*/td</span><br></pre></td></tr></table></figure><p>进行包装器评估：</p><p>​    准确率：包装器A的准确率高于包装器B，则A优于B</p><p>​    召回率：包装器A的召回率和包装器B的召回率一样，则A等于B</p><p>​    综上两个标准比较，选择包装器A。</p><h2 id="自动抽取"><a href="#自动抽取" class="headerlink" title="自动抽取"></a>自动抽取</h2><p> 首先来说，网站的数据自动抽取是可行的，因为网站中的数据通常是用很少的一些模板来编码的，通过挖掘多个数据记录中的重复模式来寻找这些模板是可能。其次，自动抽取也能够克服手工方法和包装器归纳的缺陷。手工方法，仅适用于那些较简单网站，工作量不大的情况。有监督的包装器则维护开销会很大，比如网站改变了以后的模板，之前生成的包装器就需要相应的进行修改，才能使用。</p><p>​    网页数据自动抽取的流程如下所示：</p><p><img src="/../resources%5C935893-20190923153237874-1829310518.png" alt="image-20220811203513854"></p><p>对于需要抽取数据的网页，需要进行预处理，也就是网页清洗工作，规范网页代码结构和标签的使用，然后对网页进行聚类处理，通过一定的聚类算法，将特征相近的网页归为一组，然后，根据不同组的聚类网页，训练生成相应的包装器模板，使得每组相似的网页获得一个包装器模板，分别使用不同的包装器模板，对相应的网页进行信息抽取，获取网页中的目标数据，最后，将得到的数据保存到数据库中。</p><p>​    网页信息自动抽取的一个代表就是RoadRunner，它是自动抽取网页数据的包装器，通过比较同类网页的两个样本页面，然后分析两个页面的相似性和不同性，归纳出一个正则文法，然后根据正则文法生成一个网页所包含的数据模式，最后抽取网页的数据。</p><h2 id="三类网页数据抽取方法的比较"><a href="#三类网页数据抽取方法的比较" class="headerlink" title="三类网页数据抽取方法的比较"></a>三类网页数据抽取方法的比较</h2><p><img src="/../resources%5Cimage-20220811203513854.png" alt="image-20220811203513854"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p> 网页信息抽取除了使用包装器的方法，目前，使用爬虫技术对网页信息进行爬取也很普遍，这些技术并不是单一的一个技术，都有很多技术点组成，存在着一定的交叉。在实际的使用中，大家可以根据具体的情况，采用相应的技术，或者是多项技术的融合，来达到获取网页信息数据的目的。</p>]]></content:encoded>
      
      
      <category domain="https://congyx.com/categories/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/">知识图谱</category>
      
      
      <category domain="https://congyx.com/tags/%E4%BF%A1%E6%81%AF%E6%8A%BD%E5%8F%96/">信息抽取</category>
      
      
      <comments>https://congyx.com/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E5%AE%9E%E8%B7%B5-%E4%B8%83/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>知识图谱实践(六)</title>
      <link>https://congyx.com/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E5%AE%9E%E8%B7%B5-%E5%85%AD/</link>
      <guid>https://congyx.com/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E5%AE%9E%E8%B7%B5-%E5%85%AD/</guid>
      <pubDate>Thu, 11 Aug 2022 12:25:46 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;从结构化数据进行知识抽取-D2RQ&quot;&gt;&lt;a href=&quot;#从结构化数据进行知识抽取-D2RQ&quot; class=&quot;headerlink&quot; title=&quot;从结构化数据进行知识抽取(D2RQ)&quot;&gt;&lt;/a&gt;从结构化数据进行知识抽取(D2RQ)&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="从结构化数据进行知识抽取-D2RQ"><a href="#从结构化数据进行知识抽取-D2RQ" class="headerlink" title="从结构化数据进行知识抽取(D2RQ)"></a>从结构化数据进行知识抽取(D2RQ)</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>D2RQ，含义是把关系型数据库当作虚拟的RDF图数据库进行访问。D2RQ平台是一个将关系型数据库当作虚拟的、只读的RDF图数据库进行访问的系统。提供了基于RDF访问关系数据库的内容，而无需复制这个数据库将其以RDF的形式进行保存。D2RQ有以下功能：</p><p>使用SPARQL查询非RDF数据库；</p><p>在Web上，将数据库内容当作链接数据进行访问；</p><p>以RDF形式创建一个自定义的数据库，加载成RDF存储；</p><p>使用Apache Jena API访问非RDF数据库的信息。</p><p>D2RQ是一个开源软件，基于Apache协议发布，源代码在Github上。</p><p>D2RQ平台的组成</p><p>l D2RQ映射语言，一种声明的映射语言，用于描述本体和关系数据模型之间的关系。</p><p>l D2RA引擎，一种服务于Jena语义网工具库插件，使用映射重写对数据库的SQL访问的Jena API调用，并且将查询结果传递给框架高层。</p><p>l D2R服务器，一个提供调试用的链接数据视图和HTML视图的HTTP服务器，还提供了一个SPARQL协议endpoint数据接口。</p><p><img src="/../resources%5C935893-20190808153811462-1357317205.png" alt="img"></p><h2 id="D2RQ映射语言"><a href="#D2RQ映射语言" class="headerlink" title="D2RQ映射语言"></a>D2RQ映射语言</h2><p>D2RQ是一种声明式语言，描述了关系型数据库规则和RDFS词汇或OWL本体之间的关系。D2RQ本身是一个符合Trutle语法的RDF文档，映射是用在D2RQ命名空间下的术语表示的，D2RQ命名空间是</p><p><a href="http://www.wiwiss.fu-berlin.de/suhl/bizer/D2RQ/0.1#">http://www.wiwiss.fu-berlin.de/suhl/bizer/D2RQ/0.1#</a></p><p>映射定义了一个虚拟RDF图，包括数据库的信息。和SQL视图概念类似，除了虚拟的数据结构是一个RDF图而不是虚拟的关系表。这个虚拟的RDF图能够以多种方式访问，取决于映射的实现形式。D2RQ平台提供了SPARQL访问，一个链接数据服务器，一个RDF数据集生成器，一个简单的HTML界面和Jena API访问D2RQ映射数据库。</p><p>下图显示了一个D2RQ映射实例的结构</p><p><img src="/../resources%5C935893-20190808153823045-818001472.png" alt="img"></p><p>数据库映射为RDF术语，显示在右侧的，使用d2rq:ClassMaps and d2rq:PropertyBridges。映射中最重要的问题是类的映射，一个类映射表示一个类或者一组相似的本体类。类映射描述了类的实例如何生成URI或者空节点。它还有一组属性映射规则，能够描述实例的属性如何创建。</p><h2 id="D2R服务器"><a href="#D2R服务器" class="headerlink" title="D2R服务器"></a>D2R服务器</h2><p>D2R服务器是一个工具，基于语义网发布关系型数据库的内容，所有的信息都是由链接数据组成。语义网上的数据都是用RDF模型化和表示，D2R服务器使用了一个定制化D2RQ映射将数据库内容转换为RDF的形式，允许以RDF数据浏览和搜索，这是语义网中最主要的两种访问数据的方式。</p><p>网络的请求通过映射重写为SQL查询语句，这种即时转换允许从大型实时数据库发布RDF，并且无需将数据复制到专用的RDF三元组存储中。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>非常简要的介绍了D2RQ的内容，实际的使用过程中，应该更深入的参考<a href="http://d2rq.org/%E7%9A%84%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9%E3%80%82">http://d2rq.org/的相关内容。</a></p>]]></content:encoded>
      
      
      <category domain="https://congyx.com/categories/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/">知识图谱</category>
      
      
      <category domain="https://congyx.com/tags/D2RQ/">D2RQ</category>
      
      
      <comments>https://congyx.com/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E5%AE%9E%E8%B7%B5-%E5%85%AD/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>知识图谱实践(五)</title>
      <link>https://congyx.com/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E5%AE%9E%E8%B7%B5-%E4%BA%94/</link>
      <guid>https://congyx.com/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E5%AE%9E%E8%B7%B5-%E4%BA%94/</guid>
      <pubDate>Thu, 11 Aug 2022 12:15:09 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Protege简介&quot;&gt;&lt;a href=&quot;#Protege简介&quot; class=&quot;headerlink&quot; title=&quot;Protégé简介&quot;&gt;&lt;/a&gt;Protégé简介&lt;/h1&gt;&lt;p&gt;Protégé是一个本体建模工具软件，由斯坦福大学基于java语言开发的，属于开放源代码软件。软件主要用于语义网中本体的构建和基于本体的知识应用，是本体构建的核心开发工具，最新版本为5.5.0（截至2019年7月）。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Protege简介"><a href="#Protege简介" class="headerlink" title="Protégé简介"></a>Protégé简介</h1><p>Protégé是一个本体建模工具软件，由斯坦福大学基于java语言开发的，属于开放源代码软件。软件主要用于语义网中本体的构建和基于本体的知识应用，是本体构建的核心开发工具，最新版本为5.5.0（截至2019年7月）。</p><span id="more"></span><p>Protégé支持中文，能够实现实体关系的中文展示。如下图。</p><p><img src="/../resources%5C935893-20190729172822437-707245774.png" alt="img"></p><p>具体来说，Protégé具有以下功能。</p><p>类建模。Protégé提供了一个图形化用户界面来建模类（包括概念）和它们的属性以及关系。</p><p>实例编辑。根据创建的类型，Protégé会自动产生交互的形式，可以根据类之间的关系获得相应实例的约束，并对实例进行编辑。</p><p>模型处理。Protégé有一些插件库，可以定义语义、解答询问以及定义逻辑行为。</p><p>模型交换。最终的模型（类、实例、关系、属性等）能以各种各样的格式被保存和加载，包括XML、UML、RDF、OWL等。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>软件到官网<a href="https://protege.stanford.edu/products.php%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E3%80%82Prot%C3%A9g%C3%A9%E6%98%AF%E7%94%B1java%E5%BC%80%E5%8F%91%E7%9A%84%EF%BC%8C%E8%BF%90%E8%A1%8C%E6%97%B6%E9%9C%80%E8%A6%81java%E8%BF%90%E8%A1%8C%E6%97%B6%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8F%AF%E8%83%BD%E9%9C%80%E8%A6%81%E9%85%8D%E7%BD%AE%E4%B8%80%E4%B8%8Bjava%E7%9A%84%E8%BF%90%E8%A1%8C%E6%97%B6%E7%8E%AF%E5%A2%83%EF%BC%8C%E6%8C%89%E7%85%A7%E6%8F%90%E7%A4%BA%E8%BF%9B%E8%A1%8C%E9%85%8D%E7%BD%AE%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86%E3%80%82">https://protege.stanford.edu/products.php直接下载。Protégé是由java开发的，运行时需要java运行时环境，运行时可能需要配置一下java的运行时环境，按照提示进行配置就可以了。</a></p><h2 id="主要工作tab"><a href="#主要工作tab" class="headerlink" title="主要工作tab"></a>主要工作tab</h2><p>打开软件后，可以看到工作区域是由很多tab组成。</p><p><img src="/../resources%5C935893-20190729172901859-409384028.png" alt="img"></p><p>Active ontology是显示当前的实体名称，以URI的形式显示，前面是<a href="http://www.semanticweb.org/">www.semanticweb.org</a>后面跟着主机名（我的主机名称为dell），再后面是默认的根据时间命名实体。</p><p>Entities，可以看作是实体的总览，能够看到我们创建实体的一些主要信息，是对实体信息的汇总。</p><p>Classes，是对本体模型中，类型部分的编辑，能够定义类之间的层次关系，相互之间的关系。</p><p>Object properties，物体关系，可以理解为编辑实体外部的关系，也就是实体和实体之间的关系。</p><p>Data properties，数据属性，可以理解为编辑实体内部的属性，用来定义实体本身所具有的属性以及属性值。</p><p>Annotation Properties，标注属性，是w3c定义的一些常用的属性，根据URI可以看到这些属性的具体说明。</p><p>Individuals by class，根据类型创建的实例，用来编辑实例信息，类似于java程序中的对象，要归于某个类别。</p><p>OntoGraf，本体关系图，用来展示我们创建的本体里面各个实体之间的层次关系。</p><p>SPARQL Query，SPARQL查询，使用SPARQL语言，对创建的本体进行查询，获取查询结果。</p><h2 id="创建一个本体实例"><a href="#创建一个本体实例" class="headerlink" title="创建一个本体实例"></a>创建一个本体实例</h2><h3 id="创建本体"><a href="#创建本体" class="headerlink" title="创建本体"></a>创建本体</h3><p>软件打开后，就像大多数软件一样，利用file-new来创建一个本体，Protégé会自己根据默认规则为本体起一个名称，比如我创建的本体名称为：<a href="http://www.semanticweb.org/dell/ontologies/2019/6/untitled-ontology-35%EF%BC%8C%E7%84%B6%E5%90%8E%E6%88%91%E4%BB%AC%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%BC%96%E8%BE%91%E8%BF%99%E4%B8%AA%E6%9C%AC%E4%BD%93%E4%BA%86%E3%80%82">http://www.semanticweb.org/dell/ontologies/2019/6/untitled-ontology-35，然后我们就可以编辑这个本体了。</a></p><h2 id="建立模型层的数据"><a href="#建立模型层的数据" class="headerlink" title="建立模型层的数据"></a>建立模型层的数据</h2><p>本体分为模型层和数据层，模型层主要定义类和类之间的关系。Thing是所有类型的根节点，也就是基类，所有的类型都是从Thing派生出来的，我们建立如图的类型层次结构。</p><p><img src="/../resources%5C935893-20190729172929101-333830764.png" alt="img"></p><p>在Classes这个tab页面下，可以看到红色方框标出来的是Add subclass，一个是工具栏直接增加子类，一个是通过右键选择增加子类，比如我们将鼠标点击owl:Thing之后，然后增加子类人物、势力、工具。然后再点击人物，再增加子类文官、武将和皇族，同样操作，增加工具的子类，武器和马匹。</p><p>还可以定义类之间的一些约束关系，比如人物和工具是互斥的，选择人物后，在右下方，Disjoint with关系选择工具。表示了人物和工具的互斥关系，这时候，我们点击工具，就会发现，Disjoint with已经自动添加了人物这个类。</p><h2 id="创建实体关系"><a href="#创建实体关系" class="headerlink" title="创建实体关系"></a>创建实体关系</h2><p>创建实体之间的关系，在Object Properties这个tab页面。</p><p><img src="/../resources%5C935893-20190729172955386-785897198.png" alt="img"></p><p>编辑方法和添加类型的tab页面类似，最顶层的实体关系为owl:topObjectProperty，选择后，点击工具栏的按钮或者右键选择add sub-properties，添加使用、属于和骑三个关系。对于“使用”这个关系，Domains选择人物，Ranges选择武器，代表三元组中主语是人物，谓语是使用，宾语是武器，组成的三元组就是人使用武器。“属于”这个关系，Domains和Ranges分别为人物和势力，“骑”这个关系的Domains和Ranges分别为人物和马匹。</p><h2 id="创建实体属性"><a href="#创建实体属性" class="headerlink" title="创建实体属性"></a>创建实体属性</h2><p>创建实体的属性，在Data properties这个tab页面。</p><p><img src="/../resources%5C935893-20190729173013316-486028324.png" alt="img"></p><p>三国里面的人物，人名都有一个字，比如一般都说，关羽关云长。关羽就是他的名字，云长是他的字。名字用于自称，字都是别人喊得，表示尊重。</p><p>添加属性“字”后，Domains我们选择人物，Ranges选自如图，在Built in datatypes中选择xsd:string，表示“字”的属性值类型是个字符串。</p><h2 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h2><p>创建本体的实例，在Individuals by class这个tab页面。</p><p> <img src="/../resources%5C935893-20190729173030856-1805454646.png" alt="img"></p><p>在Individuals里面，创建关羽、刘备、诸葛亮、蜀、赤兔马、青龙偃月刀等实例。然后分别编辑这些实例。此处以关羽为例说明对实例的编辑。</p><p>首先是确定实例的类型，关羽的类型，选择武将。然后增加实体的关系，骑赤兔马，属于蜀，使用青龙偃月刀等三个关系。最后增加数据属性，字为云长。</p><p>这样就确定了关羽这个实例的类型、关系和属性，从而编辑完成关羽这个实例。同样方法，编辑其它实例的类型、关系和属性，如果某项内容空缺，可以不编辑。</p><h2 id="本体关系的展示"><a href="#本体关系的展示" class="headerlink" title="本体关系的展示"></a>本体关系的展示</h2><p>对于本体的关系信息展示，在OntoGrap这个tab页面。</p><p><img src="/../resources%5C935893-20190729173046125-691914016.png" alt="img"></p><p>双击左侧的owl:Thing，在右侧区域会显示本体信息，将展示的信息中，有加号的都双击展开，就会看到整个本体的关系图。红色方框中，是以不同的方式展示关系图，依次是按字母网格展示，径向展示，弹簧展示，垂直树状展示，水平树状展示，垂直方向展示，水平方向展示等。如果将鼠标放到某个信息节点，就会显示该信息节点的详细信息。本例中显示的是“关羽”这个信息点的详细信息。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>介绍了Protégé的基础知识，并通过一个具体的本体创建过程，将软件的使用做了说明。Protégé作为一个强大的本体编辑工具，还有很多功能，比如推理能力，希望通过介绍，大家能够对Protégé进行简单的操作，并通过不断地实践和练习，能够更深入的理解和使用Protégé。</p>]]></content:encoded>
      
      
      <category domain="https://congyx.com/categories/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/">知识图谱</category>
      
      
      <category domain="https://congyx.com/tags/protege/">protege</category>
      
      
      <comments>https://congyx.com/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E5%AE%9E%E8%B7%B5-%E4%BA%94/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>知识图谱实践(四)</title>
      <link>https://congyx.com/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E5%AE%9E%E8%B7%B5-%E5%9B%9B/</link>
      <guid>https://congyx.com/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E5%AE%9E%E8%B7%B5-%E5%9B%9B/</guid>
      <pubDate>Thu, 11 Aug 2022 07:41:44 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Sparql的使用&quot;&gt;&lt;a href=&quot;#Sparql的使用&quot; class=&quot;headerlink&quot; title=&quot;Sparql的使用&quot;&gt;&lt;/a&gt;Sparql的使用&lt;/h1&gt;&lt;h2 id=&quot;Sparql简介&quot;&gt;&lt;a href=&quot;#Sparql简介&quot; class=&quot;headerlink&quot; title=&quot;Sparql简介&quot;&gt;&lt;/a&gt;Sparql简介&lt;/h2&gt;&lt;p&gt;SPARQL的定义，是一个递归的定义，为SPARQL Protocal and RDF Query Language，是W3C制定的RDF知识图谱标准查询语言，大部分的图数据库都支持SPARQL查询。SPARQL在语法上借鉴了SQL。SPARQL是针对RDF三元组进行查询，通过图匹配的方式获得需要查找的内容。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Sparql的使用"><a href="#Sparql的使用" class="headerlink" title="Sparql的使用"></a>Sparql的使用</h1><h2 id="Sparql简介"><a href="#Sparql简介" class="headerlink" title="Sparql简介"></a>Sparql简介</h2><p>SPARQL的定义，是一个递归的定义，为SPARQL Protocal and RDF Query Language，是W3C制定的RDF知识图谱标准查询语言，大部分的图数据库都支持SPARQL查询。SPARQL在语法上借鉴了SQL。SPARQL是针对RDF三元组进行查询，通过图匹配的方式获得需要查找的内容。<span id="more"></span></p><p>下面通过一个例子来说明SPARQL的查询语句的基本结构。这个例子可以在<a href="http://dbpedia.org/sparql%E4%B8%AD%E8%BF%90%E8%A1%8C%EF%BC%8C%E8%8E%B7%E5%8F%96%E7%BB%93%E6%9E%9C%E3%80%82">http://dbpedia.org/sparql中运行，获取结果。</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">prefix ontology:&lt;http://dbpedia.org/ontology/&gt;</span><br><span class="line"></span><br><span class="line">select distinct  ?p  ?o</span><br><span class="line"></span><br><span class="line">from &lt;http://dbpedia.org&gt;</span><br><span class="line"></span><br><span class="line">where &#123;ontology:deathDate ?p ?o&#125;</span><br><span class="line"></span><br><span class="line">LIMIT 10</span><br></pre></td></tr></table></figure><p>查询例句，包括了5个部分。</p><p>第一部分是前缀声明，这部分主要是为了后面查询内容的简洁，本例中用ontology代替<a href="http://dbpedia.org/ontology/%EF%BC%8C%E5%9C%A8%E5%90%8E%E9%9D%A2%E7%9A%84%E6%9F%A5%E8%AF%A2%E4%B8%AD%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8ontology%EF%BC%8C%E6%AF%94%E5%A6%82ontology:deathDate%E5%B0%B1%E8%A1%A8%E7%A4%BAhttp://dbpedia.org/ontology/deathDate%EF%BC%8C">http://dbpedia.org/ontology/，在后面的查询中直接使用ontology，比如ontology:deathDate就表示http://dbpedia.org/ontology/deathDate，</a></p><p>第二部分是select子句，用来确定需要查找的内容。以变量的形式体现，本例中就是查找?p和?o，按照三元组的主谓宾结构，这里查找的是谓语和宾语，分别用带问号的字符（串）来表示。</p><p>第三部分是from子句，用来确定从哪个图数据库中查找，类似于关系数据库的表名。本例需要查找的数据是在图数据库<a href="http://dbpedia.org中进行查找.也可以把http//dbpedia.org%E8%BF%99%E4%B8%AAGraph">http://dbpedia.org中进行查找。也可以把http://dbpedia.org这个Graph</a> IRI放到第一个方框内，作为默认的数据集名称。</p><p>第四部分是where子句，这部分是用来匹配三元组，把需要匹配的内容放到{}中，本例中，ontology:deathDate ?p ?o的含义就是主语是ontology:deathDate，即<a href="http://dbpedia.org/ontology/deathDate%EF%BC%8C%E8%B0%93%E8%AF%AD%E6%98%AF?p%EF%BC%8C%E5%AE%BE%E8%AF%AD%E6%98%AF?o%EF%BC%8C%E5%8C%B9%E9%85%8D%E8%BF%99%E4%B8%AA%E5%86%85%E5%AE%B9%E7%BB%93%E6%9E%84%E7%9A%84%E6%89%80%E6%9C%89%E4%B8%89%E5%85%83%E7%BB%84%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E6%89%BE%E5%87%BA%E4%B8%BB%E8%AF%AD%E6%98%AFhttp://dbpedia.org/ontology/deathDate%E7%9A%84%E6%89%80%E6%9C%89%E4%B8%89%E5%85%83%E7%BB%84%E3%80%82">http://dbpedia.org/ontology/deathDate，谓语是?p，宾语是?o，匹配这个内容结构的所有三元组，也就是找出主语是http://dbpedia.org/ontology/deathDate的所有三元组。</a></p><p>第五部分是查询修正的内容，类似于关系数据查询最后的一些限定子句，比如排序order by，限定前几个输出的limit等。本例就是用的limit 10，限定只输出10个结果。</p><p>查询结果如下</p><p><img src="/../resources%5Cimage-20220811201102773.png" alt="image-20220811201102773"></p><h2 id="一些常用的查询语句"><a href="#一些常用的查询语句" class="headerlink" title="一些常用的查询语句"></a>一些常用的查询语句</h2><h3 id="最简单的查询"><a href="#最简单的查询" class="headerlink" title="最简单的查询"></a>最简单的查询</h3><p>就像SQL语句中的查询所有内容select * from table，SPARQL也有一个查询全部数据的语句，也是最简单的语句。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select ?s ?p ?o where &#123;?o ?p ?o&#125;</span><br></pre></td></tr></table></figure><p>这个语句可以查看图数据库里面的所有三元组，不过如果数据集比较庞大，可能发生延时错误，也就是在一定的时间内查询不能完成导致最后无法完成查询，从而不能提供查询结果。</p><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><p>在SPARQL中，也有类似SQL中的聚合函数，比如count，比较常用的一个就是查询图数据库的三元组数量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(?s) where &#123;?o ?p ?o&#125;</span><br></pre></td></tr></table></figure><p>我们用上面的语句查询<a href="http://dbpedia.org中三元组的数量,我查了几次,有几次是给出延时错误,有的时候能给出结果./">http://dbpedia.org中三元组的数量，我查了几次，有几次是给出延时错误，有的时候能给出结果。</a></p><p><img src="/../resources%5Cimage-20220811201207293.png" alt="image-20220811201207293"></p><p>可以看到，<a href="http://dbpedia.org这个图数据库一共有3亿多条数据./">http://dbpedia.org这个图数据库一共有3亿多条数据。</a></p><h2 id="opional过滤"><a href="#opional过滤" class="headerlink" title="opional过滤"></a>opional过滤</h2><p>使用optional，可以起到过滤的作用，如果满足optional后面匹配的条件，则结果显示出来。比如下面的语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">prefix ontology:&lt;http://dbpedia.org/ontology/&gt;</span><br><span class="line"></span><br><span class="line">select distinct ?p ?o</span><br><span class="line"></span><br><span class="line">where &#123;&#123;?s ?p &lt;http://schema.org/deathDate&gt;&#125; optional &#123;?s &lt;http://www.w3.org/2000/01/rdf-schema#label&gt; ?o&#125;&#125;</span><br></pre></td></tr></table></figure><p>查询的含义是先查找宾语是<a href="http://schema.org/deathDate">http://schema.org/deathDate</a> 的主语?s和谓语?p，将主语?s满足模式?s <a href="http://www.w3.org/2000/01/rdf-schema#label">http://www.w3.org/2000/01/rdf-schema#label</a> ?o的内容找出来，最后显示出两个条件都满足的结果，也可以理解为，通过optional后面的子句过滤掉一部分第一个子句的结果，得到最终的结果。<img src="/../resources%5Cimage-20220811201251463.png" alt="image-20220811201251463"></p><h2 id="union全集"><a href="#union全集" class="headerlink" title="union全集"></a>union全集</h2><p>union也是一个在SPARQL中常用的关键字，使用union表示，将所有union连接的子句匹配的结果都显示出来。我们还用2.3的例子，不过把optional替换为union，可以比较一下二者的不同。</p><p>查询语句为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">prefix ontology:&lt;http://dbpedia.org/ontology/&gt;</span><br><span class="line"></span><br><span class="line">select distinct ?p ?o</span><br><span class="line"></span><br><span class="line">where &#123;&#123;?s ?p &lt;http://schema.org/deathDate&gt;&#125; union &#123;?s &lt;http://www.w3.org/2000/01/rdf-schema#label&gt; ?o&#125;&#125;</span><br></pre></td></tr></table></figure><p>查询结果为（部分结果）</p><p><img src="/../resources%5C935893-20190725115131858-68266755.png" alt="img"></p><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><p>在SQL中的like查询，在SPARQL中也有对应的语句，就是使用FILTER 和regex。</p><p>例句为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">prefix ontology:&lt;http://dbpedia.org/ontology/&gt;</span><br><span class="line"></span><br><span class="line">select distinct ?p ?o</span><br><span class="line"></span><br><span class="line">where &#123;ontology:deathDate ?p ?o filter regex(?p,&#x27;label&#x27;)&#125;</span><br></pre></td></tr></table></figure><p>还是查找主语deathDate这个主语的谓语和宾语列表，模糊查询的是谓语中含有’label’的谓语和宾语，这个filter和regex的组合实现的功能就是类似SQL的like功能。</p><p>查询结果为</p><p><img src="/../resources%5Cimage-20220811201343311.png" alt="image-20220811201343311"></p><p>从结果可以看到，模糊查询中谓语只包含了有label的内容，其它的给过滤掉了。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这里只是简单介绍了SPARQL的语法和常用的查询语句，实际环境中，应用SPARQL进行查询可能会复杂的多，会有很多复合语句，更为复杂的可能会跨数据集进行查询，也可能用到RDF的一些特性，比如只查找字面量或者只查找IRI的数据等等。总之，SPARQL查询，在实际的使用中，会碰到各种不同的需求，还要根据具体情况写出各种查询语句。</p><p>书写SPARQL查询语句的时候，还要细心，不能出错，不能写错一个字符，有的时候还要注意顺序，这些问题没有注意到，都可能导致查不到结果，或者是直接报错。在拼接SPARQL的时候，要多一些耐心，按照SPARQL规则来，循序渐进，慢慢就会初步掌握这种查询语言。</p><p>另外SPARQL还有UPDATE功能，有insert和delete关键字，但是没有update关键字，也就是说，SPARQL如果实现update操作，需要先insert再delete，从而达到update的效果。SPARQL的UPDATE功能，不如查询功能用的广泛，可能是因为数据集一般数据量大，都是直接以文件的形式存到数据库中的缘故。</p>]]></content:encoded>
      
      
      <category domain="https://congyx.com/categories/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/">知识图谱</category>
      
      
      <category domain="https://congyx.com/tags/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/">知识图谱</category>
      
      
      <comments>https://congyx.com/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E5%AE%9E%E8%B7%B5-%E5%9B%9B/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>知识图谱实践(三)</title>
      <link>https://congyx.com/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E5%AE%9E%E8%B7%B5-%E4%B8%89/</link>
      <guid>https://congyx.com/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E5%AE%9E%E8%B7%B5-%E4%B8%89/</guid>
      <pubDate>Thu, 11 Aug 2022 07:41:28 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;知识表示&quot;&gt;&lt;a href=&quot;#知识表示&quot; class=&quot;headerlink&quot; title=&quot;知识表示&quot;&gt;&lt;/a&gt;知识表示&lt;/h1&gt;&lt;p&gt;构建知识图谱的时候，首先是要建立知识表达的的数据模型，也就是知识图谱整个的数据组织体系，主要是数据的分类及层次关系，还有属性及属性的关系。数据组织体系建立之后，我们就要考虑数据如何表达的问题，这种表达方式应该是既可以让人们容易理解，也要让计算机能够理解和使用。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="知识表示"><a href="#知识表示" class="headerlink" title="知识表示"></a>知识表示</h1><p>构建知识图谱的时候，首先是要建立知识表达的的数据模型，也就是知识图谱整个的数据组织体系，主要是数据的分类及层次关系，还有属性及属性的关系。数据组织体系建立之后，我们就要考虑数据如何表达的问题，这种表达方式应该是既可以让人们容易理解，也要让计算机能够理解和使用。<span id="more"></span></p><h2 id="Linked-Data"><a href="#Linked-Data" class="headerlink" title="Linked Data"></a>Linked Data</h2><p><img src="/../resources%5C935893-20190720155337201-1798654001.png" alt="img"></p><p>在语义网的技术栈中，数据表示占了很大比重，按照语义网技术标准要求，所有的实体或属性数据都应该用URI&#x2F;IRI来表示，除了文本描述的数据，所有数据都应该有一个统一的标识，标识的形式可以是XML、RDF、RDFS或者本体语言OWL，这些都说明数据表示是整个语义网的基础。</p><p>万维网之父，也是语义网的创始人，Tim Berners-Lee也一直呼吁建立互联的数据（Linked Data），还在TED上发表了演讲，演讲题目是raw data now，号召人们开放共享原始数据，让整个世界成为一个互通互联的世界。他的演讲既说明了数据共享的重要性，也说明了数据互联互通的重要性。</p><p>Tim Berners-Lee为了鼓励人们开放共享数据，制定了Linked Data的五星规则，数据每加一颗星，这样的数据就更容易被得到和利用，能够增强数据的互联互通。</p><p>一星：以开放的协议提供到互联网上（不论什么格式），称为开放数据</p><p>二星：能够被机器识别的结构化数据（比如excel，而不是表格的扫描图片）</p><p>三星：非专有格式（比如csv代替excel）</p><p>四星：加上以上要求，使用开放标准从W3C（RDF和SPARQL）到实体，让人们能够根据表述就能确定你所要表达的东西。</p><p>五星：满足以上所有要求，并且能够将你的数据与其他人的数据链接起来，提供上下文。</p><p><img src="/../resources%5C935893-20190720155347807-787014092.png" alt="img"></p><h2 id="RDF"><a href="#RDF" class="headerlink" title="RDF"></a>RDF</h2><p>上面提到让数据互联互通，那么，数据以何种形式展示，才能更好的互联互通呢，知识图谱中，数据的展示形式就是RDF，RDF是应为Resource Description Framework的缩写，即资源描述框架，它可以看作是一个数据模型，也可以看作是表示数据的方法手段。</p><p>其中Resource，资源，顾名思义，是一种数据资源，可以是图片、视频，也可以是人、物或者概念等等，是用URI可以唯一标识的对象。</p><p>Description，描述，是对资源的描述，资源被IRI标识之后，我们能够确定资源，这个资源得内涵外延等具体的内容，还是需要资源的属性和关系来确定。描述就是对资源的属性和关系的内容。</p><p>Framework，框架，是描述资源的语言、语法和模型。</p><p>在RDF中，知识总是以三元组的形式出现，一条知识都是分解为主语（subject）、谓语（predicate）和宾语（object）的三元组（triple）来表示。</p><p>我们以维基百科里面的莎士比亚为例，来看一下RDF的表示方式，莎士比亚的作品有哈姆雷特，用RDF表示为：</p><p><a href="https://www.wikidata.org/wiki/Q692">https://www.wikidata.org/wiki/Q692</a>  <a href="https://www.wikidata.org/wiki/Property:P800">https://www.wikidata.org/wiki/Property:P800</a> <a href="https://www.wikidata.org/wiki/Q41567">https://www.wikidata.org/wiki/Q41567</a></p><p>其中<a href="https://www.wikidata.org/wiki/Q692%E6%98%AF%E8%8E%8E%E5%A3%AB%E6%AF%94%E4%BA%9A%E7%9A%84URI%EF%BC%8Chttps://www.wikidata.org/wiki/Property:P800%E6%98%AFnotable">https://www.wikidata.org/wiki/Q692是莎士比亚的URI，https://www.wikidata.org/wiki/Property:P800是notable</a> work的URI</p><p><a href="https://www.wikidata.org/wiki/Q41567%E6%98%AF%E5%93%88%E5%A7%86%E9%9B%B7%E7%89%B9%E7%9A%84URI%E3%80%82">https://www.wikidata.org/wiki/Q41567是哈姆雷特的URI。</a></p><p>在维基数据里，关于莎士比亚的知识，都是通过这样的RDF，将一条条的知识汇聚起来，形成莎士比亚的知识卡片。以下是莎士比亚的知识卡片的一部分。</p><p><img src="/../resources%5C935893-20190720155402433-153410570.png" alt="img"></p><p>在实际的应用中，RDF还有几种序列化方法，也就是存储和传输RDF数据的具体实现形式，主要有RDF&#x2F;XML，N-Triples，Turtle，RDFa，JSON-LD等。这些都是满足RDF规则的数据表现形式，各有特点，适于不同的应用场景。</p><p>XML格式技术成熟，存储和解析方便，但该格式比较冗长，不便于阅读，知识图谱很少使用这种格式来表示数据。N-Triples，比较直观简单，一行一个三元组表示一条知识，方便解析和处理，在知识图谱中应用较多。Turtle可以看作是N-Triples的全面版本，比N-Triples要复杂一些，但相对原始的RDF要简洁，语法规则也比较严谨清晰，在知识图谱中使用比较广泛。RDFa，RDF in Attributes，是将RDF数据嵌到网页中，对于前端显示没有影响，对于浏览器来说，能够在非结构化数据中较方便的提取结构化信息，有利于数据的获取和共享。JSON-LD，JSON for Linking Data，用键值对的形式存储RDF数据，也是为了网络数据的共享和传播。</p><p>和RDF一起使用的还有RDFS（RDF Schema），RDF表示的是数据层的内容，RDFS表示的是模型层的内容，RDFS为RDF数据提供一个类型系统，定义了数据的类型、子类型、属性、子属性、主语的范围、宾语的范围等信息，RDFS为数据定义了一个规则范围，RDF数据按照RDFS制定的规则组织数据。</p><h2 id="OWL"><a href="#OWL" class="headerlink" title="OWL"></a>OWL</h2><p>OWL，不是猫头鹰，是Web Ontology Language，Web本体语言，是W3C制定一种适用于语义网使用的数据模型规范，它融合了哲学中的本体的概念，研究世界上的各种实体以及它们是如何关联的。OWL是对RDFS的一种扩展，弥补了RDFS在表达能力的一些缺陷。OWL也是遵循RDF规范的，比RDF更加严谨，丰富了属性以及属性约束，定义域、值域的约束等等。</p><p>OWL又分为OWL Lite、OWL DL和OWL Full三个子语言。OWL Lite是最简单的OWL，可以看作是OWL Full的简化版本。OWL DL在OWL Lite的基础上，包括了OWL的所有属性约束。OWL Full允许在预定义的词汇上增加词汇，导致逻辑蕴含不可判定。</p><p>OWL的新版本是OWL2，OWL2也有三个子语言，OWL2 QL、OWL2 EL和OWL2 RL，OWL2 QL代表Query Language，专为基于本体的查询设计，可以使用标准关系型数据库技术（例如SQL）来实现，仅需要依据公理扩展查询。OWL2 EL为概念术语描述、推理而设计，拥有一个具备相对表达力的类表达式语言，并且对类表达式如何可以用在公理中没有限制。应用在大型生物健康本体模型的构建中。OWL2 RL面向需要可扩展又不能牺牲太多表达能力的应用程序，被设计用来适应可以牺牲语言的完整表达力以换取效率的OWL2应用程序，以及需要一些来自OWL2的额外表达力的RDF（S）应用程序。</p><p>OWL和OWL2属于W3C推荐的语义网数据模型组织语言，结构严谨，逻辑全面，但在实际的企业级应用中较少使用，主要是因为OWL相对来说比较复杂，不如直接使用Turtle或者N-Triples来的方便。</p><p>参考资料：</p><p>1 <a href="https://www.w3.org/DesignIssues/LinkedData.html">https://www.w3.org/DesignIssues/LinkedData.html</a></p><p>2 <a href="https://zhuanlan.zhihu.com/p/32122644">https://zhuanlan.zhihu.com/p/32122644</a></p><p>3 <a href="https://my.oschina.net/airship/blog/920020">https://my.oschina.net/airship/blog/920020</a></p>]]></content:encoded>
      
      
      <category domain="https://congyx.com/categories/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/">知识图谱</category>
      
      
      <category domain="https://congyx.com/tags/%E7%9F%A5%E8%AF%86%E8%A1%A8%E7%A4%BA/">知识表示</category>
      
      
      <comments>https://congyx.com/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E5%AE%9E%E8%B7%B5-%E4%B8%89/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>知识图谱实践(二)</title>
      <link>https://congyx.com/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E5%AE%9E%E8%B7%B5-%E4%BA%8C/</link>
      <guid>https://congyx.com/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E5%AE%9E%E8%B7%B5-%E4%BA%8C/</guid>
      <pubDate>Thu, 11 Aug 2022 07:40:44 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;知识图谱数据模型的构建&quot;&gt;&lt;a href=&quot;#知识图谱数据模型的构建&quot; class=&quot;headerlink&quot; title=&quot;知识图谱数据模型的构建&quot;&gt;&lt;/a&gt;知识图谱数据模型的构建&lt;/h1&gt;&lt;p&gt;数据模型就是数据组织方式，是构建知识图谱首要解决的问题，无论是开放域的知识图谱还是行业的知识图谱，都需要收集大量的数据，这些数据的收集是有选择性的，这个选择的依据就是数据模型。数据模型，也可以称为知识表达模型，解决知识图谱如何组织数据的问题，是数据的底层架构，是一个知识体系框架，能够涵盖住知识图谱所有的数据，决定了数据收集的范围。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="知识图谱数据模型的构建"><a href="#知识图谱数据模型的构建" class="headerlink" title="知识图谱数据模型的构建"></a>知识图谱数据模型的构建</h1><p>数据模型就是数据组织方式，是构建知识图谱首要解决的问题，无论是开放域的知识图谱还是行业的知识图谱，都需要收集大量的数据，这些数据的收集是有选择性的，这个选择的依据就是数据模型。数据模型，也可以称为知识表达模型，解决知识图谱如何组织数据的问题，是数据的底层架构，是一个知识体系框架，能够涵盖住知识图谱所有的数据，决定了数据收集的范围。<span id="more"></span></p><h2 id="数据的分类问题"><a href="#数据的分类问题" class="headerlink" title="数据的分类问题"></a>数据的分类问题</h2><p>通用知识图谱，它收集的数据比较全，涉及到各种各样的知识。我们可以把通用知识图谱认为是一个大而全的知识图谱，它基本能涵盖所有的知识，当然，这类通用知识图谱，由于涵盖的知识范围广，所有对于某一个知识点，可能不会说的特别细，也就是深度不够。行业知识图谱和通用知识图谱，正好是一个互补的关系，行业知识图谱是对某一个行业的知识，组织的很专业，研究的很深入。</p><p>无论是通用知识图谱还是行业知识图谱，都存在数据的组织问题，首要的就是数据如何分类，可以画一个树状图，根节点为物体或者对象，就是包含万物，然后再一层层的进行分类，知识图谱中的所有知识都可以在树状图中找到对应的节点。</p><p>下面我们以百科数据为例，介绍一下知识图谱的分类问题。其它通用知识图谱，也有自己的分类体系，和百科的分类大同小异，但也有自己的一些特点。</p><p>百科知识的组织，第一层分类为艺术、科学、自然、文化、地理、生活、社会、人物、经济、体育、历史等。</p><img src="/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E5%AE%9E%E8%B7%B5-%E4%BA%8C/resources/image-20220811154643178.png" alt="image-20220811154643178" style="zoom:67%;"><p>选择一个分类，比如科学分类，就能看到第二层分类科学的分类体系，包括健康医疗、航空航天、天文学、环境生态、农业科学、生命科学、数理科学、心理学、信息科学、工程技术、化学、地球科学、其它等。</p><p><img src="/../resources%5C935893-20190707092245915-343172619.png" alt="img"></p><p>再继续选择，比如健康医疗，就可以看到第三层的分类，医学知识库的知识分类情况，从医疗症状、药物、中医药、诊断技术等几个维度来组织医学知识。</p><p><img src="/../resources%5C935893-20190707092301166-1243899689.png" alt="img"></p><p>通过这种分类体系，就会发现，无论收集什么知识，我们都可以在体系中找到对应的分类，这样有利于大家在这个知识图谱中查找知识，也有利于添加知识，扩展知识图谱的数据内容。</p><h2 id="数据的属性"><a href="#数据的属性" class="headerlink" title="数据的属性"></a>数据的属性</h2><p>对于数据组织体系，在分类到末端节点，也就是叶子节点，就需要对这个叶子节点（具体知识点）进行描述，如何将一个知识点描述清楚，在知识图谱中，需要使用属性来描述知识点。这些属性可以从多个方面，多个层次来描述事物。</p><p>我们还是以百科数据为例，在医学知识库中，找到叶子知识点，比如糖尿病， 词条中最重要的一个是定义或者叫做简介，说明什么是糖尿病，然后是几个主要属性，英文名称、常见症状、就诊科室、传染性等。把这些属性放到最开始的位置，人们看到后，就可以对糖尿病有一个大致的了解，这些属性也能够简单反映糖尿病这个知识点的基本情况。</p><p><img src="/../resources%5Cimage-20220811154917144.png" alt="image-20220811154917144"></p><p>除了基本的属性，对于糖尿病这个知识点，还有更多的描述，百科是从病因、检查、鉴别诊断、临床表现、诊断、治疗这几个维度，来阐述糖尿病，通过这些更进一步的属性，人们就会对糖尿病有一个更深入的了解。</p><p><img src="/../resources%5Cimage-20220811154935746.png" alt="image-20220811154935746"></p><p>下面我们再继续来看一下，检查这个属性，都包括哪些内容。百科中列出了比较多的检查项目或者称为检查内容，血糖、尿糖、尿酮体、糖基化血红蛋白（HbA1c）、糖化血清蛋白等等，而且对于每一项检查内容，都有一个简短的说明。</p><p><img src="/../resources%5Cimage-20220811155001033.png" alt="image-20220811155001033"></p><p>上面的属性，就是百科对于疾病症状的知识组织方式，我们可以看一下其他的疾病症状，基本上都是按照这个方式，来组织属性数据。糖尿病这个疾病症状，通过一些属性，还可以关联到其它词条，比如检查内容中的血糖。这样就可以在知识点之间建立关联，形成一个网状的知识图谱。</p><h2 id="数据模型的构建过程"><a href="#数据模型的构建过程" class="headerlink" title="数据模型的构建过程"></a>数据模型的构建过程</h2><p>在构建数据模型的实践中，基本上都会找一个类似的知识体系，或者粗略的数据分类体系，然后以其为基础，再进行扩展。当然，在收集数据的过程中，也可能会收集到大量脱离数据模型的数据，这时候，就可以根据这些数据进行数据模型的修改和完善。</p><p>构建数据模型的初始阶段，可以找一个知识图谱的中心数据，比如构建一个音乐知识图谱，可以以歌曲为中心，先考虑歌曲的属性，比如演唱者、作词、作曲、分类、歌词、乐谱等等，对于这些属性，一方面是考虑在知识图谱中是否合适，需要不断地斟酌，修改、增加或者删除一些属性，从而达到完善属性的目的。另一方面，还要确定这些属性对应的属性值，比如演唱者、作词、作曲都是对应的人，人也是一种实体，也会有很多属性，比如出生日期、性别、姓名、籍贯、主要事迹、作品等等，对于人的属性，又可以开启属性论证工作，确定使用哪些属性，属性值的范围等。</p><p>在不断确定属性和属性值范围的过程中，我们还要明确一个边界。因为对于这种关联关系，可以一直做下去，最后都会变成一个万物互联的通用知识图谱。我们有的时候，可能是构建一个行业知识图谱，这时候，边界的确定就很重要，比如出生日期，对于古代人，就不能写成年月日的形式，可能就是一个朝代，这个朝代也是一个实体，我们就没有必要再对朝代进行属性和属性值的确定。因为朝代对于我们知识图谱来说，已经是相关性很小的知识了。对于朝代这类和知识图谱相关性比较弱的知识实体来说，我们才觉得办法，最简单的处理就是直接写一个名称，将它看作一个字符串或者是一个枚举值，作为枚举值的话，需要罗列出所有的朝代。另外一种处理方法就是将包含的朝代链接到通用知识图谱，比如百度百科或者dbPedia等公认的通用知识图谱。我们专注于行业知识图谱中，关联性比较强的数据。</p><h2 id="数据模型需要注意的问题"><a href="#数据模型需要注意的问题" class="headerlink" title="数据模型需要注意的问题"></a>数据模型需要注意的问题</h2><p>我们最终构建的数据模型，需要注意两个方面的问题。</p><p>一个是体系的完备性。有类、子类这样的层次关系，实体都能划分到这个层次关系中。类的属性，子属性，每个类都有什么属性，属性之间存在什么样的关系，对于一个属性来说，它可以看作是谓语，主语和宾语的范围如何界定。将类、子类、属性、子属性之间的关系描述清楚，能够把知识图谱中的相关实体都纳入到这个体系中，并且通过属性叙述清楚实体，就表示这个数据模型满足了知识图谱的完备性要求。</p><p>另一个需要注意的是数据模型度的把握。虽然有完备性的要求，但也不能将所有的内容都罗列到数据模型中。对于数据模型中的类和属性，要有所取舍，只选取那些和知识图谱相关性强的类和属性，一开始可以选的粗一些，然后再逐渐细化。也可以一开始就做的比较细致，后面再进行删减，最后形成一个内容适当的数据模型。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>现在构建知识图谱数据模型，都有一定的依据，一般不会从零开始，有一个雏形作为数据模型的基础，再进行完善。基本模式是以自顶向下为主，再根据收集的数据，对数据模型进行修正，也就是自底向上为辅，这样的构建方式比较普遍。</p>]]></content:encoded>
      
      
      <category domain="https://congyx.com/categories/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/">知识图谱</category>
      
      
      <category domain="https://congyx.com/tags/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/">知识图谱</category>
      
      
      <comments>https://congyx.com/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E5%AE%9E%E8%B7%B5-%E4%BA%8C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>知识图谱实践</title>
      <link>https://congyx.com/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E5%AE%9E%E8%B7%B5/</link>
      <guid>https://congyx.com/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E5%AE%9E%E8%B7%B5/</guid>
      <pubDate>Thu, 11 Aug 2022 07:28:28 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;知识图谱的演化过程&quot;&gt;&lt;a href=&quot;#知识图谱的演化过程&quot; class=&quot;headerlink&quot; title=&quot;知识图谱的演化过程&quot;&gt;&lt;/a&gt;知识图谱的演化过程&lt;/h1&gt;&lt;p&gt;知识图谱是一个包含很多技术内容的知识体系，总的来说，是处理关联的知识，核心是数据，但强调了数据之间的关联关系。简单来看，可以认为是数据库或知识库，和语义网有着千丝万缕的联系。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="知识图谱的演化过程"><a href="#知识图谱的演化过程" class="headerlink" title="知识图谱的演化过程"></a>知识图谱的演化过程</h1><p>知识图谱是一个包含很多技术内容的知识体系，总的来说，是处理关联的知识，核心是数据，但强调了数据之间的关联关系。简单来看，可以认为是数据库或知识库，和语义网有着千丝万缕的联系。<span id="more"></span>知识图谱是由谷歌首先提出来的，用于优化它的搜索能力，之后，获得了蓬勃的发展，研究的人也越来越多。</p><p>知识图谱的出现，不是一蹴而就的，有一个缓慢演进的过程，包括现在，也还在发展中。知识图谱的发展，可以从多个方面进行阐述，比如开放链接数据的思想，知识表示，知识推理，知识存储等，伴随着信息技术特别是人工智能技术的发展，知识图谱不断融合新的技术，不断发展和完善。此处主要讲述知识图谱理论的形成过程。</p><p><img src="/../resources%5Cimage-20220811162038819.png" alt="image-20220811162038819"></p><p>Knowledge is a familiarity, awareness, or  understanding of someone or something,  such as facts, information, descriptions, or  skills, which is acquired through experience or education by perceiving, discovering, or  learning.    ——–维基百科</p><h2 id="信息及其Memex"><a href="#信息及其Memex" class="headerlink" title="信息及其Memex"></a>信息及其Memex</h2><p>1945年，一个美国科学家Vannevar Bush在《大西洋月刊》上发表了一篇文章《As We May Think》，提出一种信息机器的构想，就像下图中的样子。</p><p><img src="/../resources%5Cimage-20220811153233326.png" alt="image-20220811153233326"></p><p>在Bush博士的设想中，这种机器还可以与图书馆联网。通过某种机制，将图书馆收藏的胶卷，自动装载到本地机器上。因此，只通过这一个机器，就可以实现海量的信息检索。他将这种机器命名为Memex，也就是“memory extender”这两个单词词首的组合，意思是“记忆的延伸”。这个设想的影响非常大，后来许多早期的计算机论文中都提到了这个机器。然后，文中关于信息切换的描述，直接启发了“超文本协议”（hypertext）的发明。现在，我们在互联网上不同的链接之间跳转，其源头都可以追溯到这篇文章。</p><h2 id="以超链接为主的WEB"><a href="#以超链接为主的WEB" class="headerlink" title="以超链接为主的WEB"></a>以超链接为主的WEB</h2><p>1989年3 月，蒂姆·伯纳·李爵士（Tim Berners-Lee）向CERN递交了一份立项建议书，建议采用超文本技术（Hypertext）把CERN内部的各个实验室连接起来，在系统建成后，将可能扩展到全世界。</p><p><img src="/../resources%5C935893-20190707091638679-2026270082.png" alt="img"></p><p>文中说明了超文本利用圆圈和箭头可以自由的描述任何事物，比使用层级结构的表格要灵活的多，特别是描述复杂系统，作用更加突出，这就是超文本的作用。这个思想也是现在比较流行的思维导图的核心思想，利用发散思维，建立联系。</p><h2 id="已链接数据为核心的语义网"><a href="#已链接数据为核心的语义网" class="headerlink" title="已链接数据为核心的语义网"></a>已链接数据为核心的语义网</h2><p>语义网的概念也是由万维网联盟的蒂姆在1998年提出，它的核心是通过给万维网上的文档 （如：HTML文档、XML文档）添加能够被计算机所理解的语义“元数据”（外语：Meta data），从而使整个互联网成为一个通用的信息交换媒介。</p><p>语义网不同于现在WWW，现有的WWW是面向文档而语义网则面向文档所表示的数据，而语义网更重视于计算机“理解与处理”，并且具有一定的判断、推理能力。</p><p>2006年蒂姆·伯纳斯-李在普林斯顿大学演讲和后期接受媒体采访时公开表示，他最初将这种智能网络命名为语义网或许不够贴切，也许更准确的名称应该是数据网（外语：Data Web）。</p><p><img src="/../resources%5C935893-20190707091712841-1987031174.png" alt="img"></p><h2 id="谷歌知识图谱-things-not-strings"><a href="#谷歌知识图谱-things-not-strings" class="headerlink" title="谷歌知识图谱,things,not strings"></a>谷歌知识图谱,things,not strings</h2><p>链接数据不断积累，数据量以几何量级增长，如何更好的使用这些数据，搜索引擎公司Google提出了知识图谱的概念。辛格博士曾经说过，The world is not made of strings , but is made of things. </p><p>知识图谱的提出，目的在于更好的利用开放链接数据，将搜索字符串变为搜索真实世界中的事物，将一个事物通过内部特征（属性）和外部联系（关系），立体的呈现在人们面前，将知识图谱看作一张以关联关系为主的巨大图谱，图谱中，点代表客观事物，边代表了事物的属性或关系。</p><img src="/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E5%AE%9E%E8%B7%B5/resources/935893-20181229144559553-575365779.png" alt="img" style="zoom:67%;">]]></content:encoded>
      
      
      <category domain="https://congyx.com/categories/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/">知识图谱</category>
      
      
      <category domain="https://congyx.com/tags/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/">知识图谱</category>
      
      
      <comments>https://congyx.com/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E5%AE%9E%E8%B7%B5/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>知识图谱(三)</title>
      <link>https://congyx.com/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1-%E4%B8%89/</link>
      <guid>https://congyx.com/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1-%E4%B8%89/</guid>
      <pubDate>Thu, 11 Aug 2022 07:11:10 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;知识图谱的构建过程&quot;&gt;&lt;a href=&quot;#知识图谱的构建过程&quot; class=&quot;headerlink&quot; title=&quot;知识图谱的构建过程&quot;&gt;&lt;/a&gt;知识图谱的构建过程&lt;/h1&gt;&lt;h2 id=&quot;知识图谱的总体构建思路&quot;&gt;&lt;a href=&quot;#知识图谱的总体构建思路&quot; class=&quot;headerlink&quot; title=&quot;知识图谱的总体构建思路&quot;&gt;&lt;/a&gt;知识图谱的总体构建思路&lt;/h2&gt;&lt;img src=&quot;/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1-%E4%B8%89/935893-20190109090654567-18322997.png&quot; alt=&quot;img&quot; style=&quot;zoom:80%;&quot;&gt;

&lt;p&gt;如图所示，从原始的数据到形成知识图谱，经历了知识抽取、知识融合（实体对齐）、数据模型构建、质量评估等步骤。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="知识图谱的构建过程"><a href="#知识图谱的构建过程" class="headerlink" title="知识图谱的构建过程"></a>知识图谱的构建过程</h1><h2 id="知识图谱的总体构建思路"><a href="#知识图谱的总体构建思路" class="headerlink" title="知识图谱的总体构建思路"></a>知识图谱的总体构建思路</h2><img src="/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1-%E4%B8%89/935893-20190109090654567-18322997.png" alt="img" style="zoom:80%;"><p>如图所示，从原始的数据到形成知识图谱，经历了知识抽取、知识融合（实体对齐）、数据模型构建、质量评估等步骤。<span id="more"></span></p><img src="/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1-%E4%B8%89/image-20220811151518235.png" alt="img" style="zoom:80%;"><p>原始的数据，按照数据的结构化程度来分，可以分为结构化数据、半结构化数据和非结构化数据，根据数据的不同的结构化形式，采用不同的方法，将数据转换为三元组的形式，然后对三元组的数据进行知识融合，主要是实体对齐，以及和数据模型进行结合，经过融合之后，会形成标准的数据表示，为了发现新知识，可以依据一定的推理规则，产生隐含的知识，所有形成的知识经过一定的质量评估，最终进入知识图谱，依据知识图谱这个数据平台，可以实现语义搜索，智能问答，推荐系统等一些应用。</p><h2 id="知识抽取"><a href="#知识抽取" class="headerlink" title="知识抽取"></a>知识抽取</h2><img src="/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1-%E4%B8%89/image-20220811151246698.png" alt="image-20220811151246698" style="zoom:80%;"><p>我们将原始数据分为结构化数据、半结构化数据和非结构化数据，根据不同的数据类型，我们采用不同的方法进行处理。</p><h3 id="结构化数据处理"><a href="#结构化数据处理" class="headerlink" title="结构化数据处理"></a>结构化数据处理</h3><p>针对结构化数据，通常是关系型数据库的数据，数据结构清晰，把关系型数据库中的数据转换为RDF数据（linked data），普遍采用的技术是D2R技术。D2R主要包括D2R Server，D2RQ Engine和D2RRQ Mapping语言。</p><p>D2R Server 是一个 HTTP Server，它的主要功能提供对RDF数据的查询访问接口，以供上层的RDF浏览器、SPARQL查询客户端以及传统的 HTML 浏览器调用。 D2RQ Engine的主要功能是使用一个可定制的 D2RQ Mapping 文件将关系型数据库中的数据换成 RDF 格式。D2RQ engine 并没有将关系型数据库发布成真实的 RDF 数据，而是使用 D2RQ Mapping 文件将其映射成虚拟的 RDF 格式。该文件的作用是在访问关系型数据时将 RDF 数据的查询语言 SPARQL 转换为 RDB 数据的查询语言 SQL，并将 SQL 查询结果转换为 RDF 三元组或者 SPARQL 查询结果。D2RQ Engine 是建立在 Jena（Jena 是一个创建 Semantic Web 应用的 Java 平台，它提供了基于 RDF，SPARQL 等的编程环境）的接口之上。 D2RQ Mapping 语言的主要功能是定义将关系型数据转换成 RDF 格式的 Mapping 规则。</p><h3 id="半结构化数据处理"><a href="#半结构化数据处理" class="headerlink" title="半结构化数据处理"></a>半结构化数据处理</h3><p>半结构化数据，主要是指那些具有一定的数据结构，但需要进一步提取整理的数据。比如百科的数据，网页中的数据等。对于这类数据，主要采用包装器的方式进行处理。</p><p>包装器是一个能够将数据从HTML网页中抽取出来,并且将它们还原为结构化的数据的软件程序。网页数据输入到包装器中，通过包装器的处理，输出为我们需要的信息。</p><p>对于一般的有规律的页面，我们可以使用正则表达式的方式写出XPath和CSS选择器表达式来提取网页中的元素。但这样的通用性很差，因此也可以通过包装器归纳这种基于有监督学习的方法,自动的从标注好的训练样例集合中学习数据抽取规则,用于从其他相同标记或相同网页模板抽取目标数据。</p><h3 id="非结构化数据处理"><a href="#非结构化数据处理" class="headerlink" title="非结构化数据处理"></a>非结构化数据处理</h3><p>对于非结构化的文本数据，我们抽取的知识包括实体、关系、属性。对应的研究问题就有三个，一是<strong>实体抽取</strong>，也称为命名实体识别，此处的实体包括概念，人物，组织，地名，时间等等。二是<strong>关系抽取</strong>，也就是实体和实体之间的关系，也是文本中的重要知识，需要采用一定的技术手段将关系信息提取出来。三是<strong>属性抽取</strong>，也就是实体的属性信息，和关系比较类似，关系反映实体的外部联系，属性体现实体的内部特征。</p><p>非结构化数据的抽取问题，研究的人比较多，对于具体的语料环境，采取的技术也不尽相同。举个例子，比如关系抽取，有的人采用深度学习的方法，将两个实体，他们的关系，以及出处的句子作为训练数据，训练出一个模型，然后对于测试数据进行关系抽取，测试数据需要提供两个实体和出处的句子，模型在训练得到的已知关系中查找，得出测试数据中两个实体之间的关系。这是一种关系抽取的方法。还有人用句法依存特征，来获取关系，这种方法认为，实体和实体之间的关系可以组成主谓宾结构，在一个句子中，找出主谓关系和动宾关系，其中的谓词和动词如果是一个词，那么这个词就是一个关系。比如说“小明吃了一个苹果”，主谓关系是“小明吃”，动宾关系是“吃苹果”，那么就认为“吃”是一个关系。</p><p>当然，还有其它很多方法，可以在一定程度上实现实体抽取，关系抽取和属性抽取，效果可能会有差异，这需要在实践中测试和完善。</p><h2 id="知识融合"><a href="#知识融合" class="headerlink" title="知识融合"></a>知识融合</h2><p>知识融合，简单理解，就是将多个知识库中的知识进行整合，形成一个知识库的过程，在这个过程中，主要需要解决的问题就是实体对齐。不同的知识库，收集知识的侧重点不同，对于同一个实体，有知识库的可能侧重于其本身某个方面的描述，有的知识库可能侧重于描述实体与其它实体的关系，知识融合的目的就是将不同知识库对实体的描述进行整合，从而获得实体的完整描述。</p><p>比如，对于历史人物曹操的描述，在百度百科、互动百科、维基百科等不同的知识库中，描述有一些差别，曹操所属时代，百度百科为东汉，互动百科为东汉末年，维基百科为东汉末期；曹操的主要成就，百度百科为“实行屯田制，安抚流民消灭群雄，统一北方，奠定曹魏政权的基础，开创建安文学，提倡薄葬”，互动百科为“统一北方”，维基百科为“统一了东汉帝国核心地区”。</p><p>由此可以看出，不同的知识库对于同一个实体的描述，还是有一些差异，所属时代的描述差别在于年代的具体程度，主要成就的差别在于成就的范围不同，等等，通过知识融合，可以将不同知识库中的知识进行互补融合，形成全面、准确、完整的实体描述。 知识融合过程中，主要涉及到的工作就是实体对齐，也包括关系对齐，属性对齐，可以通过相似度计算，聚合，聚类等技术来实现。</p><h2 id="数据模型构建"><a href="#数据模型构建" class="headerlink" title="数据模型构建"></a>数据模型构建</h2><p>数据模型就是知识图谱的数据组织框架，不同的知识图谱，会采用不同的数据模型。对于行业知识图谱来说，行业术语、行业数据都相对比较清晰，可以采用自顶向下的方式来建设知识图谱，也就是先确定知识图谱的数据模型，然后，根据数据模型约定的框架，再补充数据，完成知识图谱的建设。 数据模型的构建，一般都会找一个基础的参考模型，这个参考模型，可以参照行业的相关数据标准，整合标准中对数据的要求，慢慢形成一个基础的数据模型，再根据实际收集的数据情况，来完善数据模型。也可以从公共知识图谱数据模型中抽取，将与行业有关的数据模型从公共知识图谱数据模型中提取出来，然后结合行业知识进行完善。</p><h2 id="知识推理"><a href="#知识推理" class="headerlink" title="知识推理"></a>知识推理</h2><p>知识推理，就是根据已有的数据模型和数据，依据推理规则，获取新的知识或者结论，新的知识或结论应该是满足语义的。知识推理，依据描述逻辑系统实现。描述逻辑(Description Logic)是基于对象的知识表示的形式化，也叫概念表示语言或术语逻辑，是一阶谓词逻辑的一个可判定子集。</p><p>一个描述逻辑系统由四个基本部分组成： 最基本的元素：概念、关系、个体；TBox术语集：概念术语的公理集合； Abox断言集：个体的断言集合；TBox 和 ABox上的推理机制。</p><p>描述逻辑涉及到的内容也比较多，此处举几个例子，比如实体的分类包含关系，一个电脑椅是椅子，椅子是家具，可以说，一个电脑椅是家具。常识规则的推理，一个男人的孩子是A，一个女人的孩子是A，可以知道，这个男人和女人是配偶。</p><p>通过推理发现新的知识，应用比较多，说明知识图谱的时候也经常不自觉的会应用推理，比如前两年比较受人关注的王宝强离婚案，为什么会聘用张起淮做律师，通过知识图谱可以很清楚知道，王宝强和冯小刚关系比较密切，冯小刚聘用张起淮作为律师顾问，所以王宝强很容易和张起淮建立关系，这也可以看作是知识推理的范畴。当然，更确切地说，应该是规则的范畴。推理更强调的是固有的逻辑，规则一般是和业务相关的自定义逻辑，但推理和规则都是通过逻辑准则，获取新的知识或发现，在这里先不做区分。</p><h2 id="质量评估"><a href="#质量评估" class="headerlink" title="质量评估"></a>质量评估</h2><p>质量评估，就是对最后的结果数据进行评估，将合格的数据放入知识图谱中。质量评估的方法，根据所构建的知识图谱的不同，对数据要求的差异而有所差别。总的目的是要获得合乎要求的知识图谱数据，要求的标准根据具体情况确定。 比如对于公共领域的知识图谱，知识的获取采用了众包的方法，对于同一个知识点，可能会有很多人来完成，如果这个知识点只有一个答案，可以采用的一种策略是，将多人的标注结果进行比较，取投票多的结果作为最终的结果。当然，这是不严谨的，因为真理往往掌握在少数人的手里，特别是针对一些行业的知识图谱，表现尤为突出。行业内的一条知识，可能只有行业专家能够给出权威正确的答案，如果让大众投票来决定，可能会得到一条错误的知识。所以，针对行业知识图谱，可能会采用不同于公共知识图谱的策略，来进行知识的质量评估。</p>]]></content:encoded>
      
      
      <category domain="https://congyx.com/categories/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/">知识图谱</category>
      
      
      <category domain="https://congyx.com/tags/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/">知识图谱</category>
      
      
      <comments>https://congyx.com/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1-%E4%B8%89/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>知识图谱(二)</title>
      <link>https://congyx.com/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1-%E4%BA%8C/</link>
      <guid>https://congyx.com/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1-%E4%BA%8C/</guid>
      <pubDate>Thu, 11 Aug 2022 07:02:37 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;知识图谱的构建&quot;&gt;&lt;a href=&quot;#知识图谱的构建&quot; class=&quot;headerlink&quot; title=&quot;知识图谱的构建&quot;&gt;&lt;/a&gt;知识图谱的构建&lt;/h1&gt;&lt;p&gt;知识图谱的数据是通过三元组（主语，谓词，宾语）的方式进行组织，每一个三元组代表一条知识，这些三元组并不是杂乱无章的堆砌在知识图谱中，而是按照一定的逻辑组织起来的。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="知识图谱的构建"><a href="#知识图谱的构建" class="headerlink" title="知识图谱的构建"></a>知识图谱的构建</h1><p>知识图谱的数据是通过三元组（主语，谓词，宾语）的方式进行组织，每一个三元组代表一条知识，这些三元组并不是杂乱无章的堆砌在知识图谱中，而是按照一定的逻辑组织起来的。<span id="more"></span></p><h2 id="知识图谱的数据结构"><a href="#知识图谱的数据结构" class="headerlink" title="知识图谱的数据结构"></a>知识图谱的数据结构</h2><p>从知识图谱数据组织的架构来看，可以把知识图谱的数据分为两个层次，一个是<strong>数据模型层</strong>，数据模型是按照本体论的思想，勾画出来的数据组织模式，数据模型可以展示数据的组织方式，数据之间的相互关系，依据数据模型，数据才能得到有效的组织。数据模型除了确定对象之间的分类，关系，还要明确对象的属性，针对不同的知识图谱，需要收集的数据的内容也不相同，内容范围由对象的属性确定。数据模型的分类，关系反映了数据之间的关系特征，数据模型的属性反映了数据的内在特征。 另一个就是<strong>具体数据层</strong>，具体数据是一条条的知识，它是依据数据模型组织起来的。我们可以把数据模型看作是骨架，把具体数据看作是肌肉，两部分共同组成了一个健壮的整体，就是我们的知识图谱。不同类型的知识图谱，组织数据的方式也有所不同，涉及到具体数据，具体数据的内容也有差别。比如对于一个人物来说，如果是历史知识图谱，可能人物数据的内容主要侧重于人物的生平，主要事迹，人物关系等等，如果是文学知识图谱，人物数据的内容则会主要侧重人物的主要作品，师承关系，作品流派等等。 将知识图谱的数据分成了两个层次，在构建知识图谱的时候，是先确定数据模型再收集具体数据，还是先收集具体数据再确定数据模型，这就形成了两种构建知识图谱的方式。</p><h2 id="自顶向下的构建方式"><a href="#自顶向下的构建方式" class="headerlink" title="自顶向下的构建方式"></a>自顶向下的构建方式</h2><p>自顶向下的构建方式，是指先确定知识图谱的数据模型，再根据模型去填充具体数据，最终形成知识图谱。数据模型的设计，是知识图谱的顶层设计，根据知识图谱的特点确定数据模型，就相当于确定了知识图谱收集数据的范围，以及数据的组织方式。这种构建方式，一般适用于行业知识图谱的构建，对于一个行业来说，数据内容，数据组织方式相对来说比较容易确定。</p><p>总体来说，自顶向下的构建方式，适用于那些知识内容比较明确，关系比较清晰的领域构建知识图谱。</p><h2 id="自下向上的构建方式"><a href="#自下向上的构建方式" class="headerlink" title="自下向上的构建方式"></a>自下向上的构建方式</h2><p>自下向上的构建方式，是指先按照三元组的方式收集具体数据，然后根据数据内容来提炼数据模型。 采用这种方式构建知识图谱，是因为在开始构建知识图谱的时候，还不清楚收集数据的范围，也不清楚数据怎么使用，就是先把所有的数据收集起来，形成一个庞大的数据集，然后再根据数据内容，总结数据的特点，将数据进行整理、分析、归纳、总结，形成一个框架，也就是数据模型。一般公共领域的知识图谱采用这种方式，因为公共领域的知识图谱，涉及到海量数据，并且包括方方面面的知识，做出来的效果是大而全，这在构建初期，很难想清楚数据的整体架构，只能是根据数据的内容总结提炼特征，形成数据框架模型。比如google，百度的知识图谱，属于典型的公共领域知识图谱，现实中，使用他们的搜索工具进行内容搜索时，用户可能输入的内容千差万别，各个领域的问题都可能问到，也就使得他们的后台知识图谱内容也要覆盖所有知识，在构建他们这种公共领域的知识图谱过程中，随着数据的不断积累，才会对数据知识进行分类，慢慢呈现出知识架构。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>两种构建方式也不是一成不变的，在构建初期两种方式区别很明显，在知识图谱构建后期，两种方式可能会结合使用。对于自顶向下的构建方式，随着数据量的不断积累，可能会发现原来的数据模型并不完善，有很多数据可能没有包含在数据模型的体系中，这时候就需要修订数据模型，根据数据的特点，完善数据模型。同样，在自下向上的构建方式中，慢慢形成的数据模型，对于后期的数据收集，也有一定的指导作用，按照形成的数据模型，可以快速准确地收集相关数据。总之，数据和数据模型之间，是一个相辅相成的关系，二者在构建知识图谱的过程中缺一不可。</p>]]></content:encoded>
      
      
      <category domain="https://congyx.com/categories/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/">知识图谱</category>
      
      
      <category domain="https://congyx.com/tags/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/">知识图谱</category>
      
      
      <comments>https://congyx.com/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1-%E4%BA%8C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>知识图谱</title>
      <link>https://congyx.com/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</link>
      <guid>https://congyx.com/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</guid>
      <pubDate>Thu, 11 Aug 2022 04:12:11 GMT</pubDate>
      
      <description>&lt;h3 id=&quot;知识图谱&quot;&gt;&lt;a href=&quot;#知识图谱&quot; class=&quot;headerlink&quot; title=&quot;知识图谱&quot;&gt;&lt;/a&gt;知识图谱&lt;/h3&gt;&lt;h4 id=&quot;知识图谱和人工智能&quot;&gt;&lt;a href=&quot;#知识图谱和人工智能&quot; class=&quot;headerlink&quot; title=&quot;知识图谱和人工智能&quot;&gt;&lt;/a&gt;知识图谱和人工智能&lt;/h4&gt;&lt;p&gt;​        谈到知识图谱大部人可能很陌生，但说到人工智能，大家早已耳熟能详。目前，很多行业应用人工智能，让机器代替人进行简单重复性的工作。我们可以把人工智能分为两个层次，一个是感知层次，也就是听觉、视觉、嗅觉、味觉等等，目前人工智能在听觉和视觉方面做的比较好，语音识别，图像识别等，研究的学者越来越多，技术逐渐落地。人工智能的第二个层次，也就是认知层次，能够认识这个客观世界。而认知世界是通过大量的知识积累实现的，我们见到狗和猫，见过几次就能分辨出狗和猫，但如何让机器来分辨？&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h3 id="知识图谱"><a href="#知识图谱" class="headerlink" title="知识图谱"></a>知识图谱</h3><h4 id="知识图谱和人工智能"><a href="#知识图谱和人工智能" class="headerlink" title="知识图谱和人工智能"></a>知识图谱和人工智能</h4><p>​        谈到知识图谱大部人可能很陌生，但说到人工智能，大家早已耳熟能详。目前，很多行业应用人工智能，让机器代替人进行简单重复性的工作。我们可以把人工智能分为两个层次，一个是感知层次，也就是听觉、视觉、嗅觉、味觉等等，目前人工智能在听觉和视觉方面做的比较好，语音识别，图像识别等，研究的学者越来越多，技术逐渐落地。人工智能的第二个层次，也就是认知层次，能够认识这个客观世界。而认知世界是通过大量的知识积累实现的，我们见到狗和猫，见过几次就能分辨出狗和猫，但如何让机器来分辨？<span id="more"></span>这种认知能力是知识的运用，当我们见到狗，就会在潜意识中总结狗的特征，长耳朵，瘦脸，汪汪叫。猫的特征，短耳朵，圆脸，喵喵叫。这些知识会存储在人类的大脑中，作为经验知识，再次碰到类似的动物，人们马上就从记忆中想起该动物的特征，对号入座，马上判断出动物的类型。机器要想具有认知能力，也需要建立一个知识库，然后运用知识库来做一些事，这个知识库就是我们要说的知识图谱。从这个角度说，知识图谱是人工职能的一个重要分支，也是机器具有认知能力的基石，在人工智能领域具有非常重要的地位。</p><h4 id="知识图谱的由来"><a href="#知识图谱的由来" class="headerlink" title="知识图谱的由来"></a>知识图谱的由来</h4><p>​        知识图谱（Knowledge Graph）是 Google 在2012年对其搜索引擎中使用的知识库的称谓。</p><p><img src="/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/image-20220811123027705.png" alt="image-20220811123027705" style="zoom:67%;">众所周知，Google是做搜索引擎的，知识图谱出现之前，我们使用google、百度进行搜索的时候，搜索的结果是一堆网页，我们会根据搜索结果的网页题目再点击链接，才能看到具体内容，2012年google提出Google Knowldge Graph之后，利用知识图谱技术改善了搜索引擎核心，表现出来的效果就是我们现在使用搜索引擎进行搜索的时候，搜索结果会以一定的组织结构呈现，比如我们搜索比尔盖茨，结果如图所示</p><img src="/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/935893-20181229144559553-575365779.png" alt="img" style="zoom:67%;"><p>这样的搜索结果，与知识图谱出现之前的结果有什么区别呢，辛格尔博士对知识图谱的介绍很简短，things，not string，抓住了知识图谱的核心，也点出了知识图谱加入之后搜索发生的变化，以前的搜索，都是将要搜索的内容看作字符串，结果是和字符串进行匹配，将匹配程度高的排在前面，后面按照匹配度依次显示。利用知识图谱之后，将搜索的内容不再看作字符串，而是看作客观世界的事物，也就是一个个的个体。搜索比尔盖茨的时候，搜索引擎不是搜索“比尔盖茨”这个字符串，而是搜索比尔盖茨这个人，围绕比尔盖茨这个人，展示与他相关的人和事，左侧百科会把比尔盖茨的主要情况列举出来，右侧显示比尔盖茨的微软产品和与他类似的人，主要是一些IT行业的创始人。一个搜索结果页面就把和比尔盖茨的基本情况和他的主要关系都列出来了，搜索的人很容易找到自己感兴趣的结果。</p><h4 id="知识图谱是什么"><a href="#知识图谱是什么" class="headerlink" title="知识图谱是什么"></a>知识图谱是什么</h4><p>​        知识图谱本质上是一种语义网络，用图的形式描述客观事物，这里的图指的是数据结构中的图，也就是由节点和边组成的，这也是知识图谱（Knowledge Graph）的真实含义。</p><img src="/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/image-20220811122912945.png" alt="image-20220811122912945" style="zoom: 67%;"><p>​        知识图谱中的节点表示概念和实体，概念是抽象出来的事物，实体是具体的事物；边表示事物的关系和属性，事物的内部特征用属性来表示，外部联系用关系来表示。</p><img src="/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/image-20220811122645526.png" alt="image-20220811122645526" style="zoom:67%;"><h4 id="知识图谱如何组织数据"><a href="#知识图谱如何组织数据" class="headerlink" title="知识图谱如何组织数据"></a>知识图谱如何组织数据</h4><p>知识图谱是由实体和实体的关系组成，通过图的形式表现出来，那么实体和实体关系的这些数据在知识图谱中怎么组织呢，这就涉及到三元组的概念，在知识图谱中，节点-边-节点可以看作一条记录，第一个节点看作主语，边看作谓语，第二个节点看作宾语，主谓宾构成一条记录。知识图谱由这样的一条条三元组构成，围绕着一个主语，可以有很多的关系呈现，随着知识的不断积累，最终会形成一个庞大的知识图谱，知识图谱建设完成后，会包含海量的数据，内涵丰富的知识。</p><img src="/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/image-20220811123405135.png" alt="image-20220811123405135" style="zoom:67%;"><h4 id="知识图谱的应用场景"><a href="#知识图谱的应用场景" class="headerlink" title="知识图谱的应用场景"></a>知识图谱的应用场景</h4><ol><li><p>辅助搜索</p><img src="/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/image-20220811123649860.png" alt="image-20220811123649860" style="zoom:67%;"></li><li><p>辅助问答</p><img src="/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/image-20220811123933101.png" alt="image-20220811123933101" style="zoom:67%;"><img src="/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/image-20220811124015557.png" alt="image-20220811124015557" style="zoom:67%;"></li><li><p>辅助数据集成</p><img src="/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/image-20220811124037375.png" alt="image-20220811124037375" style="zoom:67%;"></li><li><p>辅助决策</p></li></ol><p>​        知识图谱是一个具有本体特征的语义网络，可以看成是按照本体模式组织数据的知识库，以知识图谱为基础进行搜索，可以根据查询的内容进行语义搜索，查找需要找的本体或者本体的信息，这种语义搜索功能在google、百度、阿里巴巴等数据量大的公司里得到应用。智能问答，和语义搜索类似，对于提问内容，计算机首先要分析提问问题的语义，然后再将语义转换为查询语句，到知识图谱中查找，将最贴近的答案提供给提问者。推荐系统首先要采集用户的需求，分析用户的以往数据，提取共同特征，然后根据一定的规则，对用户提供推荐的产品。比如淘宝中记录用户经常购买的商品，经常浏览的商品，提取这些商品的共同特征，然后给这个用户打上标签，然后就给用户推荐具有类似特征的商品。</p>]]></content:encoded>
      
      
      <category domain="https://congyx.com/categories/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/">知识图谱</category>
      
      
      <category domain="https://congyx.com/tags/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/">知识图谱</category>
      
      
      <comments>https://congyx.com/2022/08/11/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
