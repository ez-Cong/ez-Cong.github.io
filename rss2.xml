<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>程序人生</title>
    <link>https://congyx.com/</link>
    
    <atom:link href="https://congyx.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>欲买桂花同载酒，终不似，少年游。</description>
    <pubDate>Sun, 20 Mar 2022 07:48:14 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>numpy&amp;pandas</title>
      <link>https://congyx.com/2022/03/19/numpy-pandas/</link>
      <guid>https://congyx.com/2022/03/19/numpy-pandas/</guid>
      <pubDate>Sat, 19 Mar 2022 14:47:12 GMT</pubDate>
      
      <description>&lt;p&gt;由于打算后期学习机器学习以及 NLP 等课程，这里先学习一下有关的两个库 numpy 和 pandas。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>由于打算后期学习机器学习以及 NLP 等课程，这里先学习一下有关的两个库 numpy 和 pandas。</p><span id="more"></span><h3 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h3><p>官方文档介绍 numpy 为：numPy 是Python中科学计算的基础包。它是一个Python库，提供多维数组对象，各种派生对象（如掩码数组和矩阵），以及用于数组快速操作的各种API，有包括数学、逻辑、形状操作、排序、选择、输入输出、离散傅立叶变换、基本线性代数，基本统计运算和随机模拟等等。</p><p>这里，我们做个练习。我们需要先下载 numpy 包，输入 pip install numpy 命令。</p><p>导入 numpy包 输入一个二维矩阵：</p><p><img src="/../resources/image-20220319225611515.png" alt="image-20220319225611515"></p><p>生成一个3行4列矩阵：</p><p><img src="/../resources/image-20220319230232125.png" alt="image-20220319230232125"></p><p>生成一个3行4列全部为1的矩阵：</p><p><img src="/../resources/image-20220319232342472.png" alt="image-20220319232342472"></p><p>每隔三个数输出10-20：</p><p><img src="/../resources/image-20220319230959161.png" alt="image-20220319230959161"></p><p>生成 0-11, reshape为矩阵行列：</p><p><img src="/../resources/image-20220319232411028.png" alt="image-20220319232411028"></p><p>1-10分成5段数列：<br><img src="/../resources/image-20220319231555369.png"></p><p><strong>需要注意：</strong> <strong>linspace</strong>包含终值，<strong>range</strong> 和 <strong>arange</strong>不包含终值。</p><h4 id="矩阵运算"><a href="#矩阵运算" class="headerlink" title="矩阵运算"></a>矩阵运算</h4><p>矩阵a 减 矩阵b。同理也可以进行相加、相乘、相除。</p><p>注意的是平方运算： ** 表示平方。</p><p>也可以进行sin,cos,tan。</p><p><img src="/../resources/image-20220319232540910.png" alt="image-20220319232540910"></p><p>矩阵乘法运算：</p><p>矩阵运算：c_dot &#x3D; <strong>np.dot(a,b)</strong> </p><p>另一种形式：c_dot_2 &#x3D; <strong>a.dot(b)</strong></p><p><img src="/../resources/image-20220319233117350.png" alt="image-20220319233117350"></p><p>随机生成0-1之间数字，求和，找到最小值最大值：</p><p><img src="/../resources/image-20220319233420494.png" alt="image-20220319233420494"></p><p>axis&#x3D;1每一行中求和，寻找最大值最小值。axis&#x3D;0每一列中求和，寻找最大值最小值。</p><p><img src="/../resources/image-20220319233704066.png" alt="image-20220319233704066"></p><p>求矩阵中最大值，最小值索引：<br><img src="/../resources/image-20220320121338504.png" alt="image-20220320121338504"></p><p>求平均值：</p><p>注意：<strong>axis&#x3D;0列，axis&#x3D;1行</strong></p><p><img src="/../resources/image-20220320121404262.png" alt="image-20220320121404262"></p><p>中位数：</p><p><img src="/../resources/image-20220320121454781.png" alt="image-20220320121454781"></p><p>逐步累加：</p><p><img src="/../resources/image-20220320121520699.png" alt="image-20220320121520699"></p><p>后一项与前一项作差：</p><p><img src="/../resources/image-20220320121542889.png" alt="image-20220320121542889"></p><p>非0行索引：</p><p><img src="/../resources/image-20220320121703735.png" alt="image-20220320121703735"></p><p>矩阵转置：</p><p><img src="/../resources/image-20220320121646268.png" alt="image-20220320121635225"></p><p>flat: flat返回的是一个迭代器，可以用for访问数组每一个元素。</p><p><img src="/../resources/image-20220320122821612.png" alt="image-20220320122821612"></p><p>合并:</p><p>vertical stack上下合并</p><p>horizontal stack左右合并</p><p><img src="/../resources/image-20220320125048314.png" alt="image-20220320125048314"></p><p>向量的转置：<br><img src="/../resources/image-20220320125320194.png" alt="image-20220320125320194"></p><p>分割：</p><p><img src="/../resources/image-20220320130647220.png" alt="image-20220320130647220"></p><p>deep copy：</p><h4 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h4><p><strong>Pandas</strong> 是 python 的核心数据分析支持库，提供了快速、灵活、明确的数据结构，旨在简单、直观地处理关系型、标记型数据。Pandas 的目标是成为 Python 数据分析实践与实战的必备高级工具，其长远目标是成为<strong>最强大、最灵活、可以支持任何语言的开源数据分析工具</strong>。经过多年不懈的努力，Pandas 离这个目标已经越来越近了。</p><p>Pandas 的主要数据结构是 <strong>Series（一维数据）</strong>与 <strong>DataFrame （二维数据）</strong>，这两种数据结构足以处理金融、统计、社会科学、工程等领域里的大多数典型用例。对于 R 用户，DataFrame 提供了比 R 语言 data.frame 更丰富的功能。Pandas 基于 NumPy 开发，可以与其它第三方科学计算支持库完美集成。</p><p>Pandas还具有很多优点：官方文档中都有介绍。<a href="https://www.pypandas.cn/docs/getting_started/overview.html#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">Pandas 概览 | Pandas 中文 (pypandas.cn)</a></p><p>用值列表生成 Series 时，Pandas 默认自动生成整数索引：</p><p><img src="/../resources/image-20220320153129409.png" alt="image-20220320153129409"></p><p>用含日期时间索引与标签的 Numpy 数组生成 DataFrame：</p><p><img src="/../resources/image-20220320153715145.png" alt="image-20220320153715145"></p><p>用 Series字典对象生成DataFrame:</p><p><img src="/../resources/image-20220320154218356.png" alt="image-20220320154218356"></p><p>查看 DataFrame 头部和尾部数据：</p><p><img src="/../resources/image-20220320154424221.png" alt="image-20220320154424221"></p><p>显示索引与列名：<br><img src="/../resources/image-20220320154553779.png" alt="image-20220320154553779"></p>]]></content:encoded>
      
      
      <category domain="https://congyx.com/categories/python/">python</category>
      
      
      <category domain="https://congyx.com/tags/numpy-pandas/">numpy&amp;pandas</category>
      
      
      <comments>https://congyx.com/2022/03/19/numpy-pandas/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>python</title>
      <link>https://congyx.com/2022/03/14/python/</link>
      <guid>https://congyx.com/2022/03/14/python/</guid>
      <pubDate>Mon, 14 Mar 2022 10:57:03 GMT</pubDate>
      
      <description>&lt;h3 id=&quot;Python简介&quot;&gt;&lt;a href=&quot;#Python简介&quot; class=&quot;headerlink&quot; title=&quot;Python简介&quot;&gt;&lt;/a&gt;Python简介&lt;/h3&gt;&lt;p&gt;python 这一伟大语言诞生于1989年圣诞节期间，创始人是荷兰的Guido van Rossum。(python有两个主要的大版本: python2 和 python3。本文基于 python3 开发)&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h3 id="Python简介"><a href="#Python简介" class="headerlink" title="Python简介"></a>Python简介</h3><p>python 这一伟大语言诞生于1989年圣诞节期间，创始人是荷兰的Guido van Rossum。(python有两个主要的大版本: python2 和 python3。本文基于 python3 开发)<span id="more"></span></p><p>由于课程要求，利用 <strong>Anaconda</strong> 包管理器安装和管理 python 软件，选用了 <strong>jupyter notebook</strong> 编辑器。</p><p>python官网：<a href="https://www.python.org/">Welcome to Python.org</a></p><p>数据科学计算平台 Anaconda：Anaconda是一个集成的Python数据科学环境，Anaconda除了有Python外，还安装了180多个用于数据分析的第三方库，而且可 以使用conda命令安装第三方库和创建多个环境。相对于只安装 Python而言，避免了安装第三方库的麻烦。Anaconda的优点是已经内置了Jupyter notebook交互式计算环境、 Spyder集成开发环境，以及NumPy、pandas、Matplotlib、SciPy等各 类主要数据分析模块。Anaconda还是一个开源的包、环境管理器，可以在同一个机器上安装不同版本的软件包及其依赖，并能够在不同的环境之间切换。使用 Anaconda可以方便地进行包的管理（包的安装、卸载、更新），对于需要的各种Python的第三方包，可以直接在Anaconda中进行下载。Anaconda官网： <a href="https://www.anaconda.com/">Anaconda | The World’s Most Popular Data Science Platform</a></p><p><strong>常用类库：</strong></p><p><strong>Numpy：</strong>NumPy软件包是Python生态系统中数据分析、机器学习和科 学计算的主力军。它极大地简化了向量和矩阵的操作处理。除了能对数值数据进行切片（slice）和切块（dice）外， 使用NumPy还能为处理和调试上述库中的高级实例带来极大 便利。一般被很多大型金融公司使用，以及核心的科学计算组织 如Lawrence Livermore、NASA用其处理一些本来使用C++、 Fortran或Matlab等所做的任务。</p><p><strong>SciPy：</strong> SciPy（<a href="http://scipy.org)是基于numpy开发的高级模块,/">http://scipy.org）是基于NumPy开发的高级模块，</a> 依赖于NumPy，提供了许多数学算法和函数的实现，可便 捷快速地解决科学计算中的一些标准问题，例如数值积分 和微分方程求解、最优化、甚至包括信号处理等。作为标准科学计算程序库， SciPy它是Python科学计算程序 的核心包，包含了科学计算中常见问题的各个功能模块， 不同子模块适用于不同的应用。</p><p><strong>Pandas：</strong>Pandas提供了大量快速便捷处理数据的函数和方法。它是使Python成为强大而高效的数据分析环境的重要因素之一。 Pandas中主要的数据结构有Series、DataFrame和Panel。其中Series是一维数组，与NumPy中的一维array以及Python基本的数据结构List类似；DataFrame是二维的表格型数据结 构，可以将DataFrame理解为Series的容器； Panel是三维的 数组，可看作为DataFrame的容器。</p><p><strong>Matplotlib：</strong>Matplotlib是Python 的绘图库，是用于生成出版质量 级别图形的桌面绘图包，让用户很轻松地将数据图形化，同时还提供多样化的输出格式。</p><p><strong>Seaborn：</strong>Seaborn在Matplotlib基础上提供了一个绘制统计图形的高级接口，为数据的可视化分析工作提供了极大的 方便，使得绘图更加容易。用Matplotlib最大的困难是其默认的各种参数，而 Seaborn则完全避免了这一问题。一般来说，Seaborn 能满足数据分析90%的绘图需求。</p><p><strong>Scikit-learn：</strong>Scikit-learn是专门面向机器学习的Python开源框架， 它实现了各种成熟的算法，容易安装和使用。 Scikit-learn的基本功能有分类、回归、聚类、数据 降维、模型选择和数据预处理六大部分。</p><p>python库的一些常用命令:</p><p><strong>import 模块名 [as 别名]</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入random随机函数模块中的所有对象并设置别名</span></span><br><span class="line"><span class="keyword">import</span> random <span class="keyword">as</span> rd</span><br><span class="line"><span class="comment">#通过别名访问模块中的对象</span></span><br><span class="line"><span class="comment">#返回[1,10]之间的一个随机整数</span></span><br><span class="line">rd.randint(<span class="number">1</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><strong>from 模块名 import 对象名 [as 别名]</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入random模块中的randint,使用别名rt</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint <span class="keyword">as</span> rt</span><br><span class="line"><span class="comment">#通过别名使用randint函数</span></span><br><span class="line">rt(<span class="number">1</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="语法常识"><a href="#语法常识" class="headerlink" title="语法常识"></a>语法常识</h3><p><strong>命名规则：</strong>驼峰规则</p><p><strong>代码缩进：</strong>Tab和空格来进行缩进，注意不要混用。( Python中的缩进代表程序块的作用域，如果采用了错误的代码缩进，会导致程序抛出异常) </p><p><strong>代码注释：</strong>Python的单行注释语句用#开始，从#开始一直到末尾的部分是注释部分。如果要进行多行的注释可以使用三个单引号（’’’） 或者双引号（”””）将注释内容包围。单引号和双引号在使用上没有本质的差别。</p><p><strong>中文编码：</strong>Python中使用<strong>函数ord(x)<strong>查看x字符的编码，编码占2 个字节，因此一般再使用</strong>hex函数</strong>把编码转为十六进制显示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">ord</span>(<span class="string">&quot;A&quot;</span>)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">ord</span>(<span class="string">&quot;我&quot;</span>)))</span><br></pre></td></tr></table></figure><p><strong>关键字：</strong>关键字是Python语言本身使用的标识符，被Python语言保留，每个关键字都有其特殊的意义 ，因而不能用作标识符，否则容易产生编译错误。如False、True 、None 、and、or、not、as ………….</p><p>检查是否是Python中的关键字（保留字符），用 <strong>keyword.iskeyword (word)</strong> </p><p><strong>_ ：</strong>单独的下划线（_）用于表示上一次运算的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In[]:<span class="number">2</span>*<span class="number">3</span></span><br><span class="line">Out[]:<span class="number">6</span></span><br><span class="line">In[]:_*<span class="number">10</span></span><br><span class="line">Out[]:<span class="number">60</span></span><br></pre></td></tr></table></figure><p><strong>内置函数：</strong></p><p>类型转换函数：chr(97) ord(‘a’) str(3.15) int(3.3) </p><p>数学运算函数：abs(x) max(3,2,5,1) pow(x,y)</p><p><strong>变量赋值：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">0</span>;y=<span class="number">0</span>;z=<span class="number">0</span> <span class="comment">#多个语句间用分号分隔</span></span><br><span class="line">a, b = <span class="number">1</span>, <span class="number">2</span> <span class="comment">#采用多变量同时赋值</span></span><br><span class="line">c=d=<span class="number">3</span><span class="comment">#采用链式赋值</span></span><br><span class="line"><span class="built_in">print</span>(x,y,z,a,b,c,d)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>type()函数：</strong>一般形式：type(变量名)，其作用是查询变量的数字类型。</p><p><strong>id()函数：</strong>是获取变 量的内存地址。</p><p><strong>isinstance()函数：</strong>判断一个数值是否是某种数字类型。 </p><p><strong>Python中有六个标准的数据类型：</strong></p><ul><li>number（数字）</li><li>string（字符串） </li><li>list（列表）</li></ul><p>列表是Python里面的容器之一，由方括号和方括号括起来的数据构成。里面的数据可以是整数、浮点数、字符串， 也可以是另一个列表或者其它的数据结构。列表里面的每 一项叫作列表的一个元素，每个元素之间使用英文逗号隔开，</p><p>例如</p><p>list_1 &#x3D; [1, 2, 3, 4, 5]                     #列表里面有5个元素，全部是数字 </p><p>list_2 &#x3D; [‘abc’, ‘x’, ‘’, ‘kkk’]             #列表里面有4个元素，全部是字符串</p><p>list_3 &#x3D; []                                         #空列表 </p><p>list_4 &#x3D; [123, ‘xyz’, 3.14, [1, 2, ‘yy’]] #由多种元素组合起来的列表</p><ul><li>tuple（元组）</li></ul><p>元组是Python里面的容器之一，由小括号和小括号括起来 的数据构成。它的外型和列表非常像，只不过列表使用的 是方括号，元组使用的是小括号。“元组”中的“元”和 “二元一次方程”中的“元”是同一个意思，“组”就是组合的意思。</p><p>tuple_1 &#x3D; (1, 2, 3, 4, 5)         #元组里面有5个元素，全部为数字 </p><p>tuple_2 &#x3D; (‘abc’, ‘x’, ‘’, ‘kkk’) #元组里面有4个元素，全部是字符串 </p><p>tuple_3 &#x3D; ()                             #空元组 </p><p>tuple_4 &#x3D; (123, ‘xyz’, [1, ‘t’, ‘z’], (‘o’, ‘pp’)) #由多种元素组合起来的元组</p><ul><li>dictionary（字典）</li><li>set（集合）</li></ul><p>不可变数据类型有：Number、String、Tuple； 可变数据类型有：List、Dictionary、Set。</p><p><strong>元组和列表的区别：</strong></p><p>列表: L&#x3D;[1,2,5,7]  </p><p>元组: T&#x3D;(1,2,5,7)</p><p>列表生成以后还可以往里面继续添加数据，也可以从里面删除数据；但是元组一旦生成就不能修改。如果它里面只 有整数、浮点数、字符串、另一个元组，就既不能添加数据，也不能删除数据，还不能修改里面数据的值。但是如 果元组里面包含了一个列表，那么这个元组里面的列表依旧可以变化。</p><p>TT&#x3D;([a,b,c],12,“Hello”) </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">example_list=[<span class="string">&#x27;我&#x27;</span>,<span class="string">&#x27;是&#x27;</span>,<span class="string">&#x27;列&#x27;</span>,<span class="string">&#x27;表&#x27;</span>]</span><br><span class="line">example_tuple=[<span class="string">&#x27;我&#x27;</span>,<span class="string">&#x27;是&#x27;</span>,<span class="string">&#x27;元&#x27;</span>,<span class="string">&#x27;组&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>((example_list[<span class="number">1</span>]))</span><br><span class="line"><span class="built_in">print</span>((example_tuple[<span class="number">2</span>]))</span><br><span class="line"><span class="built_in">print</span>((example_list[-<span class="number">2</span>]))</span><br><span class="line"><span class="built_in">print</span>((example_tuple[-<span class="number">3</span>]))</span><br></pre></td></tr></table></figure><p><strong>字典：</strong></p><p>字典就是使用大括号括起来的键（Key）值（Value） 对（Key-Value对）。每个键值对之间使用英文逗号分隔， 每个Key与Value之间使用英文冒号分隔。</p><p>Key可以使用中文、英文或者数字，但是不能重复。Value 可以是任意字符串、数字、列表、元组或者另一个字典， Value可以重复。</p><p>可以通过Key来从字典中读取对应的Value，有3种主要的格式：  </p><p>变量名[key]  </p><p>变量名.get(key)  </p><p>变量名.get(key, ‘在找不到key的情况下使用这个值’) </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dict1=&#123;<span class="number">1</span>:<span class="string">&quot;good&quot;</span>,<span class="number">2</span>:<span class="string">&quot;bad&quot;</span>,<span class="number">3</span>:<span class="string">&quot;not good&quot;</span>&#125;</span><br><span class="line">value1=dict1.get(<span class="number">1</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(value1)</span><br><span class="line"></span><br><span class="line">good</span><br></pre></td></tr></table></figure><p><strong>集合：</strong></p><p>集合是使用大括号括起来的各种数据，可以看作没有 Value的字典。<strong>集合里面的元素不能重复。</strong>集合也是无序的。集合最大的应用之一就是去重。例如，<strong>把一个带有重复元素的列表先转换为集合，再转换回列表，那么重复元素就只会保留一个</strong>。把列表转换为集合需要使用set()函数， 把集合转换为列表使用list()函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">duplicated_list = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">unique_list = <span class="built_in">list</span>(<span class="built_in">set</span>(duplicated_list))</span><br><span class="line"><span class="built_in">print</span>(unique_list)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;s&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="运算符与表达式"><a href="#运算符与表达式" class="headerlink" title="运算符与表达式"></a>运算符与表达式</h3><p>算术运算符（ +、–、*、&#x2F;、**、&#x2F;&#x2F;、％ ）</p><p>关系运算符（ &gt;、&lt;、&gt;&#x3D;、&lt;&#x3D;、&#x3D; &#x3D;、!&#x3D; ）。  </p><p>逻辑运算符（and、or、not ）。  </p><p>位运算符（ &lt;&lt;、&gt;&gt;、~、|、^、&amp; ）。  </p><p>赋值运算符（ &#x3D;、复合赋值运算符 ）。 </p><p>成员运算符（ in、not in ）。  </p><p>同一运算符（ is、is not ）。  </p><p>下标运算符（ [ ] ）。  </p><p>其他（ 如函数调用运算符（））。 </p><p><strong>隐式类型转换：</strong></p><p>当有一个操作数的类型是复数时，其它数据都自动转换成复数类型。  </p><p>当有一个操作数的类型是小数时，其它数据都自动转换成小数类型。  </p><p>不支持数字和字符之间的隐式转换。  </p><p>数值的除法（&#x2F;）总是返回一个浮点数，要获取整数使用 &#x2F;&#x2F;操作符。  </p><p>混合计算时，Python会把整型转换成为浮点数。 </p><p>** 乘方运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">In[]:<span class="number">4</span>*<span class="number">3</span>**<span class="number">2</span></span><br><span class="line">Out[]:<span class="number">36</span></span><br><span class="line"></span><br><span class="line">In[]:<span class="string">&quot;a&quot;</span>*<span class="number">10</span></span><br><span class="line">Out[]:<span class="string">&#x27;aaaaaaaaaa&#x27;</span></span><br><span class="line">    </span><br><span class="line">In[]:<span class="literal">True</span> <span class="keyword">and</span> <span class="number">0</span></span><br><span class="line">Out[]:<span class="number">0</span></span><br><span class="line">    </span><br><span class="line">In[]:<span class="literal">False</span> <span class="keyword">and</span> <span class="number">12</span></span><br><span class="line">Out[]:<span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">In[]:<span class="literal">True</span> <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">Out[]:<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In[]:<span class="literal">False</span> <span class="keyword">or</span> <span class="number">12</span></span><br><span class="line">Out[]:<span class="number">12</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">In[]:x=y=<span class="number">2.5</span></span><br><span class="line">z=<span class="number">2.5</span></span><br><span class="line">x <span class="keyword">is</span> <span class="keyword">not</span> z</span><br><span class="line">Out[]:<span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">In[]:<span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;abcd&#x27;</span></span><br><span class="line">Out[]: <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">In[]:<span class="string">&#x27;ac&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;abcd&#x27;</span></span><br><span class="line">Out[]:<span class="literal">False</span> </span><br><span class="line">    </span><br><span class="line">In[]:<span class="string">&#x27;a&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;b,c,d&#x27;</span></span><br><span class="line">Out[]:<span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">In[]:<span class="number">3</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">Out[]:<span class="literal">False</span></span><br></pre></td></tr></table></figure><p><strong>链式关系表达式:</strong></p><p>相当于多个表达式之间逻 辑与的关系。</p><p> 1 &lt; 2 &lt; 3 #等价于1 &lt; 2 and 2 &lt; 3  </p><p>2 &gt;&#x3D; 1 &gt; 10 #等价于2 &gt;&#x3D; 1 and 1 &gt; 10 </p><p><strong>Python中的函数分为内置函数和模块函数。</strong> </p><p><strong>内置函数:</strong></p><ul><li>内置函数（BIF，built-in functions）是Python内置对 象类型之一，不需要导入任何模块即可使用一类函数。 </li><li>执行dir(<strong>builtins</strong>)可以列出所有的内置函数;</li><li>使用help(函数名)可以查看某个函数的用法;  abs(x):返回数字x的绝对值或复数x的模;  bin(x)、oct(x)、hex(x):把整数x转换为二进制、八进 制、十六进制的表示形式。  bytes(x)：把指定对象x转换为字节串表示形式。 </li><li>float(x)：把整数或字符串x转换为浮点数；</li><li>int(x[, d])：返回实数（float）、分数（Fraction）或 高精度实数（Decimal）x的整数部分，或把d进制的字符 串x转换为十进制并返回，d默认为十进制；</li><li>chr(x)：返回Unicode编码为x的字符；</li><li>ord(x)：返回1个字符x的Unicode编码；</li><li>isinstance(obj, type)：测试对象obj是否属于指定类型 type；</li><li>type(obj)：返回对象obj的类型；</li><li>max(x)、 min(x)：返回可迭代对象x中的最大值、最小值；</li><li>len(obj)：返回对象obj包含的元素个数；</li><li>reversed(seq):返回seq中所有元素逆序后的迭代器对象;</li><li>sorted(iterable, key&#x3D;None, reverse&#x3D;False):返回排序后的列表，其中iterable表示要排序的序列或迭代对象， key用来指定排序规则或依据，reverse用来指定升序或降序，默认为升序。该函数不改变iterable内任何元素的顺序；</li><li>sum(x, start&#x3D;0)：返回序列x中所有元素之和；</li><li>exit()：退出当前解释器环境；</li></ul><p><strong>模块函数:</strong></p><ul><li><p>math模块 </p><p>math.pi 圆周率pi </p><p>math.e 自然常数e </p><p>math.tau 数学常数τ </p><p>math.inf 正无穷大 </p><p>math.nan 非浮点数标记，NaN(Not a  Number)</p></li><li><p>random模块</p><p>random.random() 返回[0.0,1.0]区间内的一个随机小数 random.random() 返回 0.9523521796999529</p><p>random.uniform(a,b) 返回[a,b]区间内的一个随机小数 random.uniform(1,3) 返回 2.3403540401554146</p><p>random.randint(a,b) 返回[a,b]区间内的一个随机整数 random.randint(1,3) 返回2</p><p>random.randrange([ start],end,[step]) 返回[start,end)区间内的一个整数， start和step默认都是1 random.randrange(1,10)返回 5</p><p>random.choice() 随机返回给定序列中的一个元素 random.choice([‘a’,’b’,’c’]) 返回’c‘</p><p>random.shuffle(x,[ra ndom]) 将可变序列的所有元素随机排列 random.shuffle([1,2,3,4]) 返回[1, 4, 3, 2]</p></li></ul><h3 id="输入输出与字符串"><a href="#输入输出与字符串" class="headerlink" title="输入输出与字符串"></a>输入输出与字符串</h3><p>input(“提示字符串”)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">input</span>(<span class="string">&quot;请输入:&quot;</span>)</span><br><span class="line"><span class="built_in">type</span>(x)</span><br></pre></td></tr></table></figure><p>input() 函数的返回结果都是字符串，实际使用时需要将其转换为相应的类型再进行处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入:&quot;</span>))</span><br><span class="line"><span class="built_in">type</span>(x)</span><br></pre></td></tr></table></figure><p>input() 结合 <strong>eval()</strong> 可同时接受多个数据输入， 多个输入之间的间隔符必须是逗号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a,b,c = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入a,b,c三个数：&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(a,b,c,sep=<span class="string">&quot;,&quot;</span>)</span><br></pre></td></tr></table></figure><p>实现多值输入，也可以使用 <strong>split()</strong> 方法进行输 入值的分割，不同的值之间以空格分隔。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x,y = <span class="built_in">input</span>(<span class="string">&#x27;请输入2个值:&#x27;</span>).split()</span><br><span class="line"><span class="built_in">print</span>(x,y,sep=<span class="string">&#x27;,&#x27;</span>)</span><br></pre></td></tr></table></figure><p>print()函数的格式如下： </p><p>print([objects, sep&#x3D;’ ‘ &#x2F; end&#x3D;’\n’ &#x2F; file&#x3D;sys.stdout &#x2F; flush&#x3D;False) </p><p>objects是输出的对象，多个对象之间用英文逗号分割； sep是对象之间插入的分隔符，默认是空格； end是添加在输出文本最后的一个字符，默认是换行符； file指定输出内容发送到的文件，默认是显示器； flush指定输出的内容是否立即写文件。</p><p>字符串格式化%输出：</p><p>“%格式控制符”%实际参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;名字: %s,年龄: %d&#x27;</span> %(<span class="string">&#x27;张三&#x27;</span>,<span class="number">20</span>))</span><br></pre></td></tr></table></figure><p>字符串的 format 方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;:计算机&#123;&#125;的CPU占用率为&#123;&#125;%.&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;2022-03-15&#x27;</span>,<span class="string">&#x27;python&#x27;</span>,<span class="number">10</span>))</span><br></pre></td></tr></table></figure><p>使用位置（序号）索引：<br>花括号内部可以写上待输出的目标字符串的索引，也可以省略。如果省略，则按format后面的括号里的待输出的目标字符串顺序依次替换。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;1&#125;&#123;0&#125;&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;言&#x27;</span>,<span class="string">&#x27;文&#x27;</span>))</span><br></pre></td></tr></table></figure><p>使用“{序号：格式说明符}” 形式的格式说明符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;0:.2f&#125;,&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">3.1415926</span>,<span class="number">100</span>))</span><br></pre></td></tr></table></figure><p> 使用关键字索引：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello,&#123;boy&#125; and &#123;girl&#125;!&quot;</span>.<span class="built_in">format</span>(boy=<span class="string">&quot;John&quot;</span>,girl=<span class="string">&quot;Mary&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;a&#125;&#123;b&#125;&quot;</span>.<span class="built_in">format</span>(b=<span class="string">&quot;3&quot;</span>,a=<span class="string">&quot;Python&quot;</span>))</span><br></pre></td></tr></table></figure><p>使用属性索引：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="number">3</span>-<span class="number">5j</span></span><br><span class="line"><span class="built_in">print</span>((<span class="string">&#x27;复数&#123;0&#125;的实部为&#123;0.real&#125;,虚部为&#123;0.imag&#125;。&#x27;</span>.<span class="built_in">format</span>(C)))</span><br></pre></td></tr></table></figure><p>使用下标索引：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">coord = (<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;X:&#123;0[0]&#125;; Y:&#123;0[1]&#125;;Z:&#123;0[2]&#125;&#x27;</span>.<span class="built_in">format</span>(coord))</span><br></pre></td></tr></table></figure><p><strong>字符串访问方式：</strong></p><p>左闭右开原则</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;Python大数据基础与实战&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>],<span class="built_in">str</span>[<span class="number">5</span>],<span class="built_in">str</span>[-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">2</span>:<span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[:<span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">6</span>:])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[:])</span><br></pre></td></tr></table></figure><p><strong>字符串的分片：</strong></p><p><strong>str[i:j:k]：</strong>i是索引起始位置，j是索引结束位置但<strong>不包括位置上的字符</strong>，索引编号每次增加的步长为k。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str1=<span class="string">&quot;Python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str1[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(str1[<span class="number">2</span>:<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(str1[<span class="number">0</span>:-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(str1[<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p><strong>字符串查找</strong></p><ul><li><strong>find() 和 rfind()</strong> 函数分别用来查找一个字符串在另一个字符串指定范围（默认是整个字符串）中<strong>首次</strong>和最后一次出现的位置，如果不存在则返回-1；</li><li><strong>index() 和 rindex()</strong> 方法用来返回一个字符串在另一个字符串指定范围中<strong>首次</strong>和<strong>最后一次</strong>出现的位置，如果不存在则抛出异常；</li><li><strong>count()<strong>方法用来返回一个字符串在当前字符串中</strong>出现的次数</strong>。</li></ul><p><strong>字符串分割</strong></p><ul><li>**split()、rsplit()**方法分别用来以指定字符为分隔符，把当前字符串从左往右、从右往左分隔成多个字符串，并返回包含分隔结果的列表。</li><li>对于 <strong>split() 和 rsplit()</strong> 方法，如果不指定分隔符，则字符串中的任何空白符号（空格、换行符、制表符等）都将被认为是分隔符， 把连续多个空白字符看作一个分隔符。</li><li>对于split() 和rsplit() 方法，如果不指定分隔符，则字符串中的任何空白符号（空格、换行符、制表符等）都将被认为是分隔符， 把连续多个空白字符看作一个分隔符。</li></ul><p><strong>字符串的连接</strong></p><p><strong>join()</strong> 方法用来将列表中的多个字符串进行连接，并且在相邻两个字符串之间插入指定字符。示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test = [<span class="string">&quot;I&quot;</span>,<span class="string">&quot;love&quot;</span>,<span class="string">&quot;Python&quot;</span>]</span><br><span class="line">s = <span class="string">&quot;&quot;</span>.join(test)<span class="comment">#指定插入字符为空格</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p><strong>注意：使用“+”运算符也可以连接字符串，但是效率 较低，应优先使用join()方法。</strong></p><p><strong>字符串的大小写转换</strong></p><p>lower() 返回小写字符串，<strong>upper()</strong> 返回<strong>大写</strong>字符串， <strong>capitalize()</strong> 将<strong>字符串****首字符大写</strong>、<strong>title()</strong> 将字符串中每个<strong>单词首字符大写</strong>、<strong>swapcase()</strong> 完成<strong>大小写互换</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;i am a teacher&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.lower())</span><br><span class="line"><span class="built_in">print</span>(s.upper())</span><br><span class="line"><span class="built_in">print</span>(s.capitalize())</span><br><span class="line"><span class="built_in">print</span>(s.title())</span><br><span class="line"><span class="built_in">print</span>(s.swapcase())</span><br></pre></td></tr></table></figure><p> <strong>字符串替换</strong></p><p>replace() 方法把字符串中的 old（旧字符串）替换成 new(新字符串)，如果指定第三个参数max，则替换不超过 max次。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;this is string example..wow!!!this is really string&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.replace(<span class="string">&quot;is&quot;</span>,<span class="string">&quot;was&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.replace(<span class="string">&quot;is&quot;</span>,<span class="string">&quot;was&quot;</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p><strong>字符串删除</strong></p><p><strong>strip()</strong> 删除字符串<strong>两端指定的字符</strong>，<strong>rstrip() 删除</strong>字符串<strong>右端</strong>指定字符，<strong>lstrip()</strong> 删除字符串<strong>左端</strong>指定字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot; he is a student\t\t&quot;</span></span><br><span class="line"><span class="comment">#删除s左右两端的的空白字符</span></span><br><span class="line"><span class="built_in">print</span>(s.strip())</span><br><span class="line"><span class="built_in">print</span>(s.rstrip(<span class="string">&quot;\t&quot;</span>))</span><br><span class="line"><span class="string">&#x27;aabbccddeeeffg&#x27;</span>.strip(<span class="string">&#x27;gaef&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>字符串测试</strong></p><p>isalnum()、isalpha()、isdigit()、isdecimal()、isnumeric()、 isspace()、isupper()、islower()，分别测试字符串是否为数字或字母、是否为字母、是否为数字字符、是否为空白字符、是否为大写字母以及是否为小写字母。</p><p><strong>eval()</strong></p><p>内置函数eval()尝试把任意字符串转化为Python表达式并求值。</p><p><strong>startswith()、endswith()</strong></p><p>这两个方法用来判断字符串是否以指定字符串开始 或者结束。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;test.py&quot;</span>.endswith((<span class="string">&quot;.py&quot;</span>,<span class="string">&quot;.cpp&quot;</span>,<span class="string">&quot;.java&quot;</span>)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;test.py&quot;</span>.startswith(<span class="string">&quot;test&quot;</span>,<span class="number">0</span>))</span><br></pre></td></tr></table></figure><p><strong>center()、ljust()、rjust()</strong></p><p>返回指定宽度的新字符串，原字符串居中、左对齐或右对齐出现在新字符串中，如果指定的宽度大于字符串长度，则使用指定的字符（默认为空格）填充。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;let&#x27;s begin&quot;</span>.center(<span class="number">20</span>,<span class="string">&quot;+&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;let&#x27;s begin&quot;</span>.;just(<span class="number">20</span>,<span class="string">&quot;-&quot;</span>))</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://congyx.com/categories/python-%E8%AF%BE%E7%A8%8B/">python(课程)</category>
      
      
      <category domain="https://congyx.com/tags/python/">python</category>
      
      
      <comments>https://congyx.com/2022/03/14/python/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>SpringBoot</title>
      <link>https://congyx.com/2022/03/09/SpringBoot/</link>
      <guid>https://congyx.com/2022/03/09/SpringBoot/</guid>
      <pubDate>Wed, 09 Mar 2022 11:14:38 GMT</pubDate>
      
      <description>&lt;p&gt;SpringBoot是整合Spring技术栈的一站式框架&lt;/p&gt;
&lt;p&gt;SpringBoot是简化Spring技术栈的快速开发脚手架&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>SpringBoot是整合Spring技术栈的一站式框架</p><p>SpringBoot是简化Spring技术栈的快速开发脚手架<span id="more"></span></p><h3 id="SpringBoot特点"><a href="#SpringBoot特点" class="headerlink" title="SpringBoot特点"></a>SpringBoot特点</h3><h4 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h4><p>父项目依赖管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">依赖管理    </span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">父项目</span><br><span class="line"> <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>start 场景启动器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1spring-boot-starter-* ： *就某种场景</span><br><span class="line">2只要引入starter，这个场景的所有常规需要的依赖我们都自动引入</span><br><span class="line">3SpringBoot所有支持的场景</span><br><span class="line">https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter</span><br><span class="line">4 *-spring-boot-starter： 第三方为我们提供的简化开发的场景启动器。</span><br><span class="line">5所有场景启动器最底层的依赖</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自动配置 Tomcat</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    &lt;/dependency</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line">等同于</span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;xxx.xxx.xxx&quot;)</span></span><br></pre></td></tr></table></figure><h3 id="容器功能"><a href="#容器功能" class="headerlink" title="容器功能"></a>容器功能</h3><h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><p><strong>@Configuration</strong></p><ul><li>Full模式于Lite模式<ul><li>配置类组件之间无依赖关系用Lite模式加速容器启动过程，减少判断</li><li>配置类组件之间有依赖关系，方法会被调用得到之前单实例组件，用Full模式</li></ul></li></ul><p>1、配置类里面使用@Bean标注在方法上给容器注册组件，默认也是单实例的</p><p>2、配置类本身也是组件</p><p>3、proxyBeanMethods：代理bean的方法</p><ul><li>Full(proxyBeanMethods &#x3D; true)、【保证每个@Bean方法被调用多少次返回的组件都是单实例的】</li><li>Lite(proxyBeanMethods &#x3D; false)【每个@Bean方法被调用多少次返回的组件都是新创建的】</li><li>组件依赖必须使用Full模式默认。其他默认是否Lite模式</li></ul><p><strong>@Bean、@Component、@Controller、@Service、@Repository</strong></p><p><strong>@ComponentScan、@Import</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;User.class,DBHelper.class&#125;)</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myconfig</span>()&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@Conditional</strong></p><p>条件装配 @Conditional：满足Conditional指定的条件，进行组件注入</p><h4 id="原生配置文件引入"><a href="#原生配置文件引入" class="headerlink" title="原生配置文件引入"></a>原生配置文件引入</h4><p><strong>@ImportResource</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">======================beans.xml=========================</span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;haha&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.boot.bean.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hehe&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.boot.bean.Pet&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tomcat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource(&quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">======================测试=================</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">haha</span> <span class="operator">=</span> run.containsBean(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hehe</span> <span class="operator">=</span> run.containsBean(<span class="string">&quot;hehe&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;haha：&quot;</span>+haha);<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hehe：&quot;</span>+hehe);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="配置绑定"><a href="#配置绑定" class="headerlink" title="配置绑定"></a>配置绑定</h4><p>读取properties文件中内容，封装到JavaBean中</p><p><strong>@ConfigurationProperties</strong></p><p><strong>@EnableConfigurationProperties + @ConfigurationProperties</strong></p><p><strong>@Component + @ConfigurationProperties</strong></p><h3 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h3><p><strong>SpringBootConfiguration</strong></p><p>@Configuration。代表当前是一个配置类</p><p><strong>@ComponentScan</strong></p><p>指定扫描</p><p><strong>@EnableAutoConfiguration</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>@AutoConfigurationPackage</strong></p><p>自动配置包，指定默认的包规则。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(AutoConfigurationPackages.Registrar.class)</span>  <span class="comment">//给容器中导入一个组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用Registrar给容器中导入一系列组件</span></span><br><span class="line"><span class="comment">//将指定的一个包下的所有组件导入进来？MainApplication 所在包下。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>@Import(AutoConfigurationImportSelector.class)</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、利用getAutoConfigurationEntry(annotationMetadata);给容器中批量导入一些组件</span><br><span class="line"><span class="number">2</span>、调用List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes)获取到所有需要导入到容器中的配置类</span><br><span class="line"><span class="number">3</span>、利用工厂加载 Map&lt;String, List&lt;String&gt;&gt; <span class="title function_">loadSpringFactories</span><span class="params">(<span class="meta">@Nullable</span> ClassLoader classLoader)</span>；得到所有的组件</span><br><span class="line"><span class="number">4</span>、从META-INF/spring.factories位置来加载一个文件。</span><br><span class="line">默认扫描我们当前系统里面所有META-INF/spring.factories位置的文件</span><br><span class="line">    spring-boot-autoconfigure-<span class="number">2.3</span><span class="number">.4</span>.RELEASE.jar包里面也有META-INF/spring.factories</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p><strong>蠢事：</strong>忘记填写@RestController</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h4 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h4><p>“YAML Ain’t Markup Language”</p><h4 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h4><p>适合用来做以数据为中心的配置文件</p><p><strong>自定义的类和配置文件绑定一般没有提示</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h3><h4 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h4><p>静态资源放在类路径下：called <code>/static</code> (or <code>/public</code> or <code>/resources</code> or <code>/META-INF/resources</code></p><p>访问：当前项目根路径&#x2F; + 静态资源名</p><p><strong>原理：</strong>静态映射&#x2F;**</p><p>请求进来，先去找Controller看能不能处理。不能处理的所有请求又都交给静态资源处理器。静态资源也找不到则响应404页面。</p><p>改变默认的静态资源路径</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">static-locations:</span> [<span class="string">classpath:/haha/</span>]</span><br></pre></td></tr></table></figure><h4 id="欢迎页"><a href="#欢迎页" class="headerlink" title="欢迎页"></a>欢迎页</h4><p>静态资源路径下配置 index.html</p><ul><li>可以配置静态资源路径</li><li>需要注意的是，如果配置了静态资源的访问前缀，会导致 index.html 不能被默认访问</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment">#  mvc:</span></span><br><span class="line"><span class="comment">#    static-path-pattern: /res/**   导致welcome page功能失效</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">static-locations:</span> [<span class="string">classpath:/haha/</span>]</span><br></pre></td></tr></table></figure><h4 id="自定义-Favicon"><a href="#自定义-Favicon" class="headerlink" title="自定义 Favicon"></a>自定义 Favicon</h4><p>favicon.io 放在静态资源目录</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment">#  mvc:</span></span><br><span class="line"><span class="comment">#    static-path-pattern: /res/**   这个会导致 Favicon 功能失效</span></span><br></pre></td></tr></table></figure><h4 id="静态资源配置原理"><a href="#静态资源配置原理" class="headerlink" title="静态资源配置原理"></a>静态资源配置原理</h4><ul><li>SpringBoot启动默认加载  xxxAutoConfiguration 类（自动配置类）</li><li>SpringMVC功能的自动配置类 WebMvcAutoConfiguration，生效</li></ul>]]></content:encoded>
      
      
      <category domain="https://congyx.com/categories/Java/">Java</category>
      
      
      <category domain="https://congyx.com/tags/Java/">Java</category>
      
      
      <comments>https://congyx.com/2022/03/09/SpringBoot/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>hexo + github 搭建个人博客</title>
      <link>https://congyx.com/2022/02/20/hello-world/</link>
      <guid>https://congyx.com/2022/02/20/hello-world/</guid>
      <pubDate>Sun, 20 Feb 2022 13:18:34 GMT</pubDate>
      
      <description>&lt;p&gt;搭建博客最重要的就是&lt;strong&gt;耐心&lt;/strong&gt;和&lt;strong&gt;坚持&lt;/strong&gt;。搭建时候遇见许多问题(权限、版本等等)，经过耐心的搜索解决方案逐一解决还是非常开心的！&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>搭建博客最重要的就是<strong>耐心</strong>和<strong>坚持</strong>。搭建时候遇见许多问题(权限、版本等等)，经过耐心的搜索解决方案逐一解决还是非常开心的！<span id="more"></span></p><h2 id="利用-hexo-github-搭建个人博客"><a href="#利用-hexo-github-搭建个人博客" class="headerlink" title="利用 hexo + github 搭建个人博客"></a>利用 hexo + github 搭建个人博客</h2><h3 id="注册-Github-和安装-Git"><a href="#注册-Github-和安装-Git" class="headerlink" title="注册 Github 和安装 Git"></a>注册 Github 和安装 Git</h3><p>首先，我们需要注册一个<a href="https://github.com/">GitHub</a>账号，有时候会因为网络问题而刷新不出页面就需要多刷新几次。(也可以利用Gitee)。然后进入Git官方(<a href="https://git-scm.com/">Git (git-scm.com)</a>)，下载Git。</p><h3 id="绑定-Github"><a href="#绑定-Github" class="headerlink" title="绑定 Github"></a>绑定 Github</h3><p>绑定GitHub方便我们上传文件。虽然在GitHub上我们可以直接上传文件，但是由于网络的原因并不好用，所以我们利用SSH来完成GitHub的绑定并提交文件，这样很方便快捷。</p><p>检查是否安装SSH，我们在新建的文件夹中右键打开Git Bash:</p><p>输入 ssh 命令，查看本机是否安装ssh。</p><p><img src="/../resources/image-20220307100552958.png"></p><p>已安装 ssh 输入ssh-keygen -t rsa 命令，指定 RSA 算法生成密钥，然后敲四次回车键，之后会生成两个文件，分别为密钥 id_rsa 和公钥id_rsa.pub。接下来我们把公钥 id_rsa.pub 的内容添加到 Github。输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/.ssh</span><br><span class="line">$ ls</span><br><span class="line">$ cat id_rsa.pub</span><br></pre></td></tr></table></figure><p>然后我们进入 Github 主页，点击右上角，然后点击 settings。</p><p><img src="/../resources/image-20220227222617803.png" alt="image-20220227222617803-16466193186986"></p><p>点击 SSH and GPG keys，再点击 New SSH key</p><p><img src="/../resources/image-20220227222722625.png" alt="image-20220227222722625"></p><p>将复制的公钥 id_rsa.pub 的内容粘贴到 key 内，再点击  Add SSH key，如下图(Title可以为空)：</p><p><img src="/../resources/image-20220227222758260.png" alt="image-20220227222758260"></p><p>验证是否成功，我们可以通过在 Git Bash 中输入 ssh -T <a href="mailto:&#103;&#x69;&#116;&#x40;&#x67;&#x69;&#116;&#104;&#117;&#x62;&#x2e;&#x63;&#111;&#109;">&#103;&#x69;&#116;&#x40;&#x67;&#x69;&#116;&#104;&#117;&#x62;&#x2e;&#x63;&#111;&#109;</a> 进行检验。</p><h3 id="提交文件"><a href="#提交文件" class="headerlink" title="提交文件"></a>提交文件</h3><p><strong>本地没有 git 仓库</strong></p><ol><li>直接将远程仓库 clone 到本地；</li><li>将文件添加并 commit 到本地仓库；</li><li>将本地仓库的内容push到远程仓库。</li></ol><p>首先，进入 Github 个人主页。</p><p>点击进入我新建的 <strong>text</strong> 项目：</p><p><img src="/../resources/image-20220227224505608.png" alt="image-20220227224505608"></p><p>点击 <strong>Code</strong> ，再复制地址，然后进入我们准备存储 Git 仓库的目录，如下图：</p><p><img src="/../resources/image-20220227224802896.png" alt="image-20220227224802896"></p><p>点击 <strong>Clone or download</strong>，再复制地址，然后进入我们准备存储 Git 仓库的目录，如下图：</p><p><img src="/../resources/image-20220227224831420.png" alt="image-20220227224831420"></p><p>接下来，输入 git clone <a href="mailto:&#103;&#x69;&#116;&#x40;&#x67;&#x69;&#116;&#x68;&#117;&#x62;&#46;&#99;&#111;&#x6d;">&#103;&#x69;&#116;&#x40;&#x67;&#x69;&#116;&#x68;&#117;&#x62;&#46;&#99;&#111;&#x6d;</a>:ez-Cong&#x2F;text.git，将远程仓库 clone 到本地。然后检查 clone 到本地的仓库内容与远程仓库的内容是否完全一致。</p><p>然后创建一个 text.txt 测试文件，如下图。</p><p><img src="/../resources/image-20220227225419620.png" alt="image-20220227225419620"></p><p>从此目录进入 Git Bash， 输入 git status 查看仓库状态：</p><p><img src="/../resources/image-20220227225710786.png" alt="image-20220227225710786"></p><p>text 已经是一个 Git 仓库了，而我们刚刚创建的文件 text.txt 没有被追踪，也就是没有提交到本地仓库。现在我们使用 git add 命令将文件添加到了「临时缓冲区」，再用 git commit -m “提交信息” 将其提交到本地仓库。</p><p>如果你是第一次提交的话，就会出现下图的情况，会让你输入用户名和邮箱：</p><p><img src="/../resources/image-20220227225819195.png" alt="image-20220227225819195"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#你只要再加两行代码就行：</span><br><span class="line">$ git config --global user.name<span class="string">&quot;xxxxx&quot;</span></span><br><span class="line">$ git config --global user.email<span class="string">&quot;xxxxxxx.com&quot;</span></span><br></pre></td></tr></table></figure><p>完成后输入 git log 命令查看仓库提交日志：</p><p><img src="/../resources/image-20220227225915090.png" alt="image-20220227225915090"></p><p>再输入 git status 查看一下仓库状态：</p><p><img src="/../resources/image-20220227225955725.png" alt="image-20220227225955725"></p><p>现在输入 git push origin main 命令，将本地仓库提交到远程仓库，origin是远程主机的名字。</p><p>刷新 GitHub 中 text 仓库。我们会发现这时我们的测试文件已经上传到了 text 仓库中。</p><h3 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h3><p>我是在万网购买的域名。</p><p>登录万网：<a href="https://link.zhihu.com/?target=https://wanwang.aliyun.com/">万网-阿里云官网</a></p><p><img src="/../resources/image-20220227230302506.png" alt="image-20220227230302506"></p><p>如果没有注册要先注册一个账号，如果已经注册过直接登录就行。（这里网络上有很多教程，所以就 ……..）</p><h3 id="安装node-js和Hexo"><a href="#安装node-js和Hexo" class="headerlink" title="安装node.js和Hexo"></a>安装node.js和Hexo</h3><p><strong>1.安装Nodejs</strong></p><p>下载地址：<a href="https://link.zhihu.com/?target=https://nodejs.org/en/">node.js官网</a></p><p><img src="/../resources/image-20220227230526391.png" alt="image-20220227230526391"></p><p>如上图，直接点击下载，完成后双击安装，安装直接默认 <em><strong>next</strong></em> 就好，我是在E盘新建了一个文件夹 nodejs，安装在这个文件夹里。如果要看详细到每一步的话，可以看一下这个文章：<a href="https://link.zhihu.com/?target=https://blog.csdn.net/antma/article/details/86104068">node.js 安装详细步骤教程</a>。</p><p>安装完成可以用打开cmd检验一下是否安装成功，用 node -v 和 npm -v 命令检查版本，如下图：</p><p><img src="/../resources/image-20220227230619080.png" alt="image-20220227230619080"></p><p><strong>设置npm在安装全局模块时的路径和环境变量</strong></p><p>因为如果不设置的话，安装模块的时候就会把模块装到C盘，占用C盘的空间，并且有可能安装好hexo后却无法使用，所以我们需要设置一下：</p><p>在 nodejs 文件夹中新建两个空文件夹 node_cache、node_global，如下图：</p><p><img src="/../resources/image-20220227230720158.png" alt="image-20220227230720158"></p><p>打开cmd，输入如下两个命令：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix &quot;D:\nodejs\node_global&quot;</span><br><span class="line">npm config set cache &quot;D:\nodejs\node_cache&quot;</span><br></pre></td></tr></table></figure><p>设置环境变量：<strong>win10系统 –&gt; 打开控制面板 –&gt; 系统 –&gt;高级系统设置 –&gt; 环境变量 ，</strong>然后在系统变量中新建一个变量名为“NODE_PATH”，值为“E:\nodejs\node_global\node_modules”，如下图：</p><p><img src="/../resources/image-20220227230852841.png" alt="image-20220227230852841"></p><p>然后编辑用户变量里的Path，将相应npm的路径改为：E:\nodejs\node_global，如下图：</p><p><img src="/../resources/image-20220227230932586.png" alt="image-20220227230932586"></p><p>然后编辑用户变量里的Path，将相应npm的路径改为：E:\nodejs\node_global，如下图：</p><p><img src="/../resources/image-20220227231020336.png" alt="image-20220227231020336"></p><p><strong>测试</strong></p><p>在 cmd 命令下执行 npm install webpack -g，然后会发现 webpack 这个模块已经在我们设置默认的文件夹中了。</p><p><img src="/../resources/image-20220227231158159.png" alt="image-20220227231158159"></p><p><strong>注意：</strong></p><p>这里有时候会显示安装失败，我们要以管理员启动 cmd 安装就可以解决这一问题。</p><p><strong>2.安装hexo</strong></p><p>Hexo是我们的个人博客网站的框架，安装之前，我们要先在GitHub上创立一个仓库，如下图：</p><p><img src="/../resources/image-20220227231519202.png" alt="image-20220227231519202"></p><p><img src="/../resources/image-20220227231638458.png" alt="image-20220227231638458"></p><p>接下来安装Hexo，首先在E盘建立一个文件夹 Blog，点开 Blog 文件夹，鼠标右键打开 Git Bush Here，输入npm命令安装Hexo：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>这里可能会出现安装失败，同样要使用管理员权限打开 git bash。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init 初始化博客</span><br><span class="line">hexo g    静态部署</span><br><span class="line">hexo s  网页部署完成，输入命令查看</span><br></pre></td></tr></table></figure><p><strong>将Hexo部署到GitHub</strong></p><p>找到我们的 Blog 文件夹，用记事本打开 _config.yml 文件，下滑到文件底部，补充如下内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:ez-Cong/ez-Cong.github.io.git  #你的仓库地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>_config.yml 文件格式要求很严格！！！一定要注意空格！！！！</p><p><img src="/../resources/image-20220227232242004.png" alt="image-20220227232242004"></p><p>仓库地址如下图：</p><p><img src="/../resources/image-20220227232323366.png" alt="image-20220227232323366"></p><p>回到 Blog 文件夹中，打开 Git Bash，安装Git部署插件，输入命令：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后分别输入以下三条命令：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean   #清除缓存文件 db.json 和已生成的静态文件 public</span><br><span class="line">hexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</span><br><span class="line">hexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span><br></pre></td></tr></table></figure><p>完成以后，打开浏览器，输入 <a href="https://link.zhihu.com/?target=https://fengye97.github.io/">https://xxx.github.io</a> 就可以打开你的网页了！</p><h3 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h3><ol><li>登录<a href="https://link.zhihu.com/?target=https://wanwang.aliyun.com/">万网</a>，点击控制台，在你已购买的域名后点击解析添加两条解析记录：</li></ol><p><img src="/../resources/image-20220227232754828.png" alt="image-20220227232754828"></p><p>IPV4地址可以通过ping得到，具体方法是：打开cmd输入下面命令：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping ez-Cong.github.io    #ping + 你的GitHub的网址</span><br></pre></td></tr></table></figure><ol start="2"><li><p>打开 Blog 文件夹里的 source 文件夹，添加CNAME文件，可以先创建一个CNAME.txt文件，打开后写上你的域名，不要加www否则每次访问都必须加www，但如果不带有www，以后访问的时候带不带www都可以访问，保存后记得要重命名，将.txt删除，如下图：</p><p><img src="/../resources/image-20220227232946124.png" alt="image-20220227232946124"></p><p><img src="/../resources/image-20220227233002760.png" alt="image-20220227233002760"></p><p>然后回到 Blog 文件夹，右键打开 Git Bash，依次输入下面三条命令：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>打开GitHub，点击 <strong>settings</strong> ，看看CNAME文件是否已经在你的项目中。</p><p>大功告成！这时候就可以浏览器直接输入你的域名就会进入自己搭建的网页啦！！！</p></li></ol>]]></content:encoded>
      
      
      <category domain="https://congyx.com/categories/hexo/">hexo</category>
      
      
      <category domain="https://congyx.com/tags/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/">hexo搭建博客</category>
      
      
      <comments>https://congyx.com/2022/02/20/hello-world/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
